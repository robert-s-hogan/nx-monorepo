═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/atoms/Button.tsx
───────────────────────────────────────────────
// apps/devblog/components/atomic/atoms/Button.tsx
import { ButtonHTMLAttributes } from 'react';

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  text: string;
  theme?: 'primary' | 'secondary' | 'danger';
  size?: 'sm' | 'md' | 'lg';
}

const themeClassNames = {
  primary: 'bg-primary text-white hover:bg-primary/90',
  secondary: 'bg-secondary text-white hover:bg-secondary/90',
  danger: 'bg-red-600 text-white hover:bg-red-700',
};

const sizeClassNames = {
  sm: 'text-sm px-3 py-1',
  md: 'text-base px-5 py-2',
  lg: 'text-lg px-6 py-3',
};

export const Button = ({
  text,
  theme = 'primary',
  size = 'md',
  className = '',
  type = 'button',
  ...props
}: ButtonProps) => {
  const baseClasses =
    'rounded-md font-semibold transition duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2';
  const themeClass = themeClassNames[theme];
  const sizeClass = sizeClassNames[size];

  return (
    <button
      type={type}
      aria-label={text}
      className={`${baseClasses} ${themeClass} ${sizeClass} ${className}`}
      {...props}
    >
      {text}
    </button>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/atoms/Heading.tsx
───────────────────────────────────────────────
// apps/devblog/components/atomic/atoms/Heading.tsx
import React from 'react';

interface HeadingProps {
  level?: 1 | 2 | 3 | 4 | 5 | 6;
  text: string;
  className?: string;
}

const baseClasses = 'font-bold tracking-tight text-text-color';

const levelClassMap: Record<number, string> = {
  1: 'text-4xl md:text-5xl',
  2: 'text-3xl md:text-4xl',
  3: 'text-2xl md:text-3xl',
  4: 'text-xl md:text-2xl',
  5: 'text-lg',
  6: 'text-base',
};

export const Heading = ({ level = 2, text, className = '' }: HeadingProps) => {
  const Tag = `h${level}` as keyof JSX.IntrinsicElements;
  const levelClasses = levelClassMap[level] || levelClassMap[2];

  return (
    <Tag className={`${baseClasses} ${levelClasses} ${className}`}>{text}</Tag>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/atoms/index.ts
───────────────────────────────────────────────
// apps/devblog/components/atomic/atoms/index.ts

export { Button } from './Button';
export { Heading } from './Heading';
export { Text } from './Text';
export { Label } from './Label';
export { Input } from './Input';
export { TextArea } from './TextArea';


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/atoms/Input.tsx
───────────────────────────────────────────────
'use client';

import * as React from 'react';
import { cn } from '@with-nx/utils';
import { useMotionTemplate, useMotionValue, motion } from 'framer-motion';

export type InputProps = React.InputHTMLAttributes<HTMLInputElement>;

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    const radius = 120;
    const [visible, setVisible] = React.useState(false);

    const mouseX = useMotionValue(0);
    const mouseY = useMotionValue(0);

    function handleMouseMove(event: React.MouseEvent<HTMLDivElement>) {
      const { currentTarget, clientX, clientY } = event;
      const { left, top } = currentTarget.getBoundingClientRect();
      mouseX.set(clientX - left);
      mouseY.set(clientY - top);
    }

    return (
      <motion.div
        style={{
          background: useMotionTemplate`
            radial-gradient(
              ${
                visible ? radius + 'px' : '0px'
              } circle at ${mouseX}px ${mouseY}px,
              var(--primary),
              transparent 80%
            )
          `,
        }}
        onMouseMove={handleMouseMove}
        onMouseEnter={() => setVisible(true)}
        onMouseLeave={() => setVisible(false)}
        className="group/input rounded-lg p-[2px] transition duration-300"
      >
        <input
          type={type}
          className={cn(
            `flex h-10 w-full border-none bg-bg-color shadow-input rounded-md px-3 py-2 text-sm
            file:border-0 file:bg-transparent file:text-sm file:font-medium
            placeholder:text-neutral-400 dark:placeholder-text-neutral-600
            focus-visible:outline-none focus-visible:ring-[2px]
            focus-visible:ring-[var(--primary-color)]
            disabled:cursor-not-allowed disabled:opacity-50
            dark:shadow-[0px_0px_1px_1px_var(--neutral-700)]
            group-hover/input:shadow-none transition duration-400`,
            className
          )}
          ref={ref}
          {...props}
        />
      </motion.div>
    );
  }
);
Input.displayName = 'Input';

export { Input };


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/atoms/Label.tsx
───────────────────────────────────────────────
'use client';
import * as React from 'react';
import * as LabelPrimitive from '@radix-ui/react-label';
import { cn } from '@with-nx/utils';

export const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(
      'text-sm leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
      className
    )}
    {...props}
  />
));

Label.displayName = 'Label';


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/atoms/Text.tsx
───────────────────────────────────────────────
// apps/devblog/components/atomic/atoms/Text.tsx
import React from 'react';

interface TextProps {
  text: string;
  className?: string;
  as?: 'p' | 'span' | 'div'; // optional override
}

export const Text = ({ text, className = '', as = 'p' }: TextProps) => {
  const baseClasses = 'text-text-color leading-relaxed';
  const Tag = as;

  return <Tag className={`${baseClasses} ${className}`}>{text}</Tag>;
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/atoms/TextArea.tsx
───────────────────────────────────────────────
'use client';
import * as React from 'react';
import { cn } from '@with-nx/utils';
import { useMotionTemplate, useMotionValue, motion } from 'framer-motion';

export type TextAreaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>;

const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>(
  ({ className, ...props }, ref) => {
    const radius = 120; // change this to increase the radius of the hover effect
    const [visible, setVisible] = React.useState(false);

    const mouseX = useMotionValue(0);
    const mouseY = useMotionValue(0);

    function handleMouseMove(event: React.MouseEvent<HTMLDivElement>) {
      const { currentTarget, clientX, clientY } = event;
      const { left, top } = currentTarget.getBoundingClientRect();

      mouseX.set(clientX - left);
      mouseY.set(clientY - top);
    }

    return (
      <motion.div
        style={{
          background: useMotionTemplate`
        radial-gradient(
          ${visible ? radius + 'px' : '0px'} circle at ${mouseX}px ${mouseY}px,
          var(--primary),
          transparent 80%
        )
      `,
        }}
        onMouseMove={handleMouseMove}
        onMouseEnter={() => setVisible(true)}
        onMouseLeave={() => setVisible(false)}
        className="group rounded-lg p-[2px] transition duration-300"
      >
        <textarea
          className={cn(
            `flex w-full border-none bg-bg-color shadow-input rounded-md px-3 py-2 text-sm file:border-0 file:bg-transparent
            file:text-sm file:font-medium placeholder:text-neutral-400 dark:placeholder-text-neutral-600
            focus-visible:outline-none focus-visible:ring-[2px] focus-visible:ring-[var(--primary-color)]
            disabled:cursor-not-allowed disabled:opacity-50 dark:shadow-[0px_0px_1px_1px_var(--neutral-700)]
            group-hover:shadow-none transition duration-400
            `,
            className
          )}
          ref={ref}
          {...props}
        />
      </motion.div>
    );
  }
);
TextArea.displayName = 'TextArea';

export { TextArea };


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/molecules/ContactForm/ContactForm.tsx
───────────────────────────────────────────────
'use client';
import React, { useState } from 'react';
import { Button, Label, Input, TextArea } from '../../atoms';
import { Meteors } from './Meteors';

function ContactForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
  });

  const [responseMessage, setResponseMessage] = useState('');
  const [isSuccess, setIsSuccess] = useState(false);
  const [isError, setIsError] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { id, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [id]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    // Introduce a slight delay
    setTimeout(async () => {
      try {
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(formData),
        });

        const result = await response.json();

        if (response.ok) {
          setIsSuccess(true);
          setIsError(false);
          setResponseMessage('Message sent successfully!');
        } else {
          setIsSuccess(false);
          setIsError(true);
          setResponseMessage(result.message || 'Failed to send message.');
        }
      } catch (error) {
        console.error('Error during submission:', error); // Debug log
        setIsSuccess(false);
        setIsError(true);
        setResponseMessage('Failed to send message.');
      } finally {
        setLoading(false);
      }
    }, 200); // Delay of 100ms
  };

  return (
    <div className="shadow-input bg-surface-color relative mx-auto min-h-[560px] w-full max-w-md rounded-2xl p-4 md:p-8">
      <form
        className={`my-8 ${
          isSuccess ? 'pointer-events-none opacity-20' : 'opacity-100'
        } transition-opacity duration-500`}
        onSubmit={handleSubmit}
        noValidate
      >
        <div className="mb-4">
          <Label htmlFor="name">Name</Label>
          <Input
            id="name"
            placeholder="Your Name"
            type="text"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>
        <div className="mb-4">
          <Label htmlFor="email">Email Address</Label>
          <Input
            id="email"
            placeholder="youremail@example.com"
            type="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        <div className="mb-8">
          <Label htmlFor="message">Message</Label>
          <TextArea
            id="message"
            placeholder="Your message here"
            value={formData.message}
            onChange={handleChange}
            required
          />
        </div>

        <Button
          type="submit"
          text=""
          className="flex w-full items-center justify-center"
          theme="primary"
        >
          {loading ? <div className="loader" /> : 'Send Message →'}
        </Button>
      </form>
      {isSuccess && (
        <div className="bg-surface-color absolute inset-0 overflow-hidden rounded-2xl bg-black/95 p-4 shadow-xl md:p-8">
          <h1 className="text-success-color mb-4 flex h-full flex-col items-center justify-center text-xl font-bold">
            {responseMessage}
          </h1>
          <Meteors number={20} />
        </div>
      )}
      {responseMessage && !isSuccess && (
        <p className={`mt-4 ${isError ? 'text-red-600' : 'text-green-600'}`}>
          {responseMessage}
        </p>
      )}
    </div>
  );
}

export { ContactForm };


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/molecules/ContactForm/Meteors.tsx
───────────────────────────────────────────────
import { cn } from '@with-nx/utils';
import React from 'react';

export const Meteors = ({
  number,
  className,
}: {
  number?: number;
  className?: string;
}) => {
  const meteors = new Array(number || 20).fill(true);
  return (
    <>
      {meteors.map((el, idx) => (
        <span
          key={'meteor' + idx}
          className={cn(
            'animate-meteor-effect absolute top-1/2 left-1/2 h-0.5 w-0.5 rounded-[9999px] bg-slate-500 shadow-[0_0_0_1px_#ffffff10] rotate-[215deg]',
            "before:content-[''] before:absolute before:top-1/2 before:transform before:-translate-y-[50%] before:w-[50px] before:h-[1px] before:bg-gradient-to-r before:from-[#64748b] before:to-transparent",
            className
          )}
          style={{
            top: 0,
            left: Math.floor(Math.random() * (400 - -400) + -400) + 'px',
            animationDelay: Math.random() * (0.8 - 0.2) + 0.2 + 's',
            animationDuration: Math.floor(Math.random() * (10 - 2) + 2) + 's',
          }}
        ></span>
      ))}
    </>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/molecules/DevBlogProjectCard.tsx
───────────────────────────────────────────────
'use client';

import { useRouter } from 'next/router';
import { IconButton } from '@with-nx/generic-ui';
import { FaExternalLinkAlt, FaArrowRight } from 'react-icons/fa';
import { Heading, Text } from '@with-nx/generic-ui';
import { cn } from '@with-nx/utils';
import { AnimatePresence, motion } from 'framer-motion';
import Image from 'next/image';
import { useRef, useState } from 'react';

export const DirectionAwareHover = ({
  imageUrl,
  children,
  childrenClassName,
  imageClassName,
  className,
  index,
}: {
  imageUrl: string;
  children: React.ReactNode | string;
  childrenClassName?: string;
  imageClassName?: string;
  className?: string;
  index: number;
}) => {
  const ref = useRef<HTMLDivElement>(null);
  const [direction, setDirection] = useState<
    'top' | 'bottom' | 'left' | 'right' | string
  >('left');

  const handleMouseEnter = (
    event: React.MouseEvent<HTMLDivElement, MouseEvent>
  ) => {
    if (!ref.current) return;
    const direction = getDirection(event, ref.current);
    switch (direction) {
      case 0:
        setDirection('top');
        break;
      case 1:
        setDirection('right');
        break;
      case 2:
        setDirection('bottom');
        break;
      case 3:
        setDirection('left');
        break;
      default:
        setDirection('left');
        break;
    }
  };

  const getDirection = (
    ev: React.MouseEvent<HTMLDivElement, MouseEvent>,
    obj: HTMLElement
  ) => {
    const { width: w, height: h, left, top } = obj.getBoundingClientRect();
    const x = ev.clientX - left - (w / 2) * (w > h ? h / w : 1);
    const y = ev.clientY - top - (h / 2) * (h > w ? w / h : 1);
    const d = Math.round(Math.atan2(y, x) / 1.57079633 + 5) % 4;
    return d;
  };

  return (
    <motion.div
      onMouseEnter={handleMouseEnter}
      ref={ref}
      className={cn(
        `w-full h-full bg-transparent overflow-hidden text-white group/card relative ${
          index % 2 === 0 ? 'rounded-r-md' : 'md:rounded-r-none md:rounded-l-md'
        }`,
        className
      )}
    >
      <AnimatePresence mode="wait">
        <motion.div
          className="relative h-full w-full"
          initial="initial"
          whileHover={direction}
          exit="exit"
        >
          <motion.div className="absolute inset-0 z-10 hidden h-full w-full bg-black/60 transition duration-500 group-hover/card:block" />
          <motion.div
            variants={variants}
            className="relative h-full w-full"
            transition={{ duration: 0.2, ease: 'easeOut' }}
          >
            <div className="overflow-hidden md:h-full md:w-full lg:h-[425px] lg:w-[1000px]">
              <Image
                alt="image"
                className={cn(
                  'h-full w-full md:object-cover md:object-left xl:object-top scale-[1.05]',
                  imageClassName
                )}
                width="1000"
                height="425"
                src={imageUrl}
              />
            </div>
          </motion.div>
          <motion.div
            variants={textVariants}
            transition={{ duration: 0.5, ease: 'easeOut' }}
            className={cn(
              'text-white absolute top-8 left-1 z-40 space-y-2',
              childrenClassName
            )}
          >
            {children}
          </motion.div>
        </motion.div>
      </AnimatePresence>
    </motion.div>
  );
};

const variants = {
  initial: { x: 0 },
  exit: { x: 0, y: 0 },
  top: { y: 20 },
  bottom: { y: -20 },
  left: { x: 20 },
  right: { x: -20 },
};

const textVariants = {
  initial: { y: 0, x: 0, opacity: 0 },
  exit: { y: 0, x: 0, opacity: 0 },
  top: { y: -20, opacity: 1 },
  bottom: { y: 20, opacity: 1 },
  left: { x: -20, opacity: 1 },
  right: { x: 20, opacity: 1 },
};

export default function DevBlogProjectCard({ projects }) {
  const router = useRouter();

  return (
    <div className="bg-secondary-color w-full rounded-md p-1 text-center lg:p-8">
      {projects.map((project, index) => (
        <div
          key={index}
          className="grid grid-cols-1 pb-8 md:grid-cols-3 md:py-16"
        >
          <div
            className={`bg-surface-color flex h-full flex-col justify-center rounded-md p-4 shadow-lg lg:p-6 ${
              index % 2 === 0
                ? 'md:rounded-r-none md:rounded-l-md'
                : 'md:rounded-l-none md:rounded-r-md'
            }`}
          >
            <Heading
              level={3}
              className="mb-2 text-2xl font-bold"
              text={project.title}
            />
            <Text
              className="mb-4 text-base lg:text-xl"
              text={project.description}
            />
            {/* <div className="flex flex-wrap gap-2 mb-4">
              {project.technologies.map((tech) => (
                <span
                  key={tech}
                  className="bg-accent-color text-xs lg:text-base px-3 py-1 rounded-md"
                >
                  {tech}
                </span>
              ))}
            </div> */}
            <IconButton
              theme="primary"
              className="mx-auto w-fit px-4 py-2"
              text="Check it"
              label="Check it"
              icon={
                project.link.startsWith('/') ? (
                  <FaArrowRight size={24} />
                ) : (
                  <FaExternalLinkAlt size={24} />
                )
              }
              onClick={() => {
                if (project.link.startsWith('/')) {
                  router.push(project.link);
                } else {
                  window.open(project.link, '_blank');
                }
              }}
            />
          </div>
          <div
            className={`hidden shadow-lg md:col-span-2 md:flex ${
              index % 2 === 0
                ? 'md:rounded-r-none md:rounded-l-md '
                : 'order-first rounded-r-md'
            }`}
          >
            <DirectionAwareHover imageUrl={project.imageUrl} index={index}>
              {project.goals ? (
                <div className="space-y-4 px-6 text-white">
                  <Heading
                    level={3}
                    text="Description & Goals"
                    className="pt-0 text-left"
                  />
                  <Text className="text-left" text={project.description} />
                  {/* 
                  <ul className="list-disc text-left">
                    {project.goals.map((goal, index) => (
                      <li key={index}>{goal}</li>
                    ))}
                  </ul> */}
                </div>
              ) : (
                ''
              )}
            </DirectionAwareHover>
          </div>
        </div>
      ))}
    </div>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/molecules/index.ts
───────────────────────────────────────────────
export { Tabs } from './Tabs';
export { ContactForm } from './ContactForm/ContactForm';


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/molecules/Tabs.tsx
───────────────────────────────────────────────
'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { cn } from '@with-nx/utils';

export type Tab = {
  title: string;
  value: string;
  content?: string | React.ReactNode;
};

export const Tabs = ({
  tabs: propTabs,
  containerClassName,
  activeTabClassName,
  tabClassName,
  contentClassName,
}: {
  tabs: Tab[];
  containerClassName?: string;
  activeTabClassName?: string;
  tabClassName?: string;
  contentClassName?: string;
}) => {
  const [active, setActive] = useState<Tab>(propTabs[0]);
  const [tabs, setTabs] = useState<Tab[]>(propTabs);

  const moveSelectedTabToTop = (idx: number) => {
    const newTabs = [...propTabs];
    const selectedTab = newTabs.splice(idx, 1);
    newTabs.unshift(selectedTab[0]);
    setTabs(newTabs);
    setActive(newTabs[0]);
  };

  const [hovering, setHovering] = useState(false);

  return (
    <>
      <div
        className={cn(
          'flex flex-row items-center justify-center [perspective:1000px] relative overflow-auto sm:overflow-visible no-visible-scrollbar max-w-full w-full',
          containerClassName
        )}
      >
        {propTabs.map((tab, idx) => (
          <button
            key={tab.title}
            onClick={() => {
              moveSelectedTabToTop(idx);
            }}
            onMouseEnter={() => setHovering(true)}
            onMouseLeave={() => setHovering(false)}
            className={cn('relative px-4 py-2 mx-1 rounded', tabClassName)}
            style={{
              transformStyle: 'preserve-3d',
            }}
          >
            {active.value === tab.value && (
              <motion.div
                layoutId="clickedbutton"
                transition={{ type: 'spring', bounce: 0.3, duration: 0.6 }}
                className={cn(
                  'absolute inset-0 bg-primary text-on-primary-color rounded',
                  activeTabClassName
                )}
              />
            )}
            <span
              className={`relative block ${
                active.value === tab.value
                  ? 'text-white'
                  : 'text-on-primary-color'
              }`}
            >
              {tab.title}
            </span>
          </button>
        ))}
      </div>
      <FadeInDiv
        tabs={tabs}
        active={active}
        key={active.value}
        hovering={hovering}
        className={cn('mt-32', contentClassName)}
      />
    </>
  );
};

export const FadeInDiv = ({
  className,
  tabs,
  hovering,
}: {
  className?: string;
  key?: string;
  tabs: Tab[];
  active: Tab;
  hovering?: boolean;
}) => {
  const isActive = (tab: Tab) => {
    return tab.value === tabs[0].value;
  };
  return (
    <div className="relative h-full w-full">
      {tabs.map((tab, idx) => (
        <motion.div
          key={tab.value}
          layoutId={tab.value}
          style={{
            scale: 1 - idx * 0.1,
            top: hovering ? idx * -60 : 0,
            zIndex: -idx,
            opacity: idx < 3 ? 1 - idx * 0.1 : 0,
            height: '100%',
          }}
          animate={{
            y: isActive(tab) ? [0, 40, 0] : 0,
          }}
          className={cn('w-full h-full absolute top-0 left-0', className)}
        >
          {tab.content}
        </motion.div>
      ))}
    </div>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/molecules/ToolsSection.tsx
───────────────────────────────────────────────
import { cn } from '@with-nx/utils';
import { AnimatePresence, motion } from 'framer-motion';
import { useState } from 'react';

export const HoverEffect = ({
  items,
  className,
}: {
  items: {
    title: string;
    link: string;
  }[];
  className?: string;
}) => {
  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);

  return (
    <div className={cn('flex flex-wrap py-10', className)}>
      {items.map((item, idx) => (
        <p
          key={item?.link}
          className="group relative block h-full w-auto py-3 px-1"
          onMouseEnter={() => setHoveredIndex(idx)}
          onMouseLeave={() => setHoveredIndex(null)}
        >
          <AnimatePresence>
            {hoveredIndex === idx && (
              <motion.span
                className="bg-primary absolute inset-0 block h-full w-full rounded-md opacity-60"
                layoutId="hoverBackground"
                initial={{ opacity: 0 }}
                animate={{
                  opacity: 1,
                  transition: { duration: 0.15 },
                }}
                exit={{
                  opacity: 0,
                  transition: { duration: 0.15, delay: 0.2 },
                }}
              />
            )}
          </AnimatePresence>
          <span className="bg-bg-color relative z-20 rounded-md p-3 text-xs md:text-base">
            {item.title}
          </span>
        </p>
      ))}
    </div>
  );
};

const tools = [
  'JavaScript',
  'Vue.js',
  'Firebase',
  'SEO',
  'GitHub',
  'Pinia',
  'Express.js',
  'Node.js',
  'HTML5',
  'CSS3',
  'React.js',
  'Next.js',
  'Jest',
  'TailwindCSS',
  'Nx Monorepo',
  'WordPress',
  'Bootstrap',
  'SASS',
  'Git',
  'jQuery',
  'React Testing Library',
  'CLI',
  'CORESense',
  'Storybook',
  'TypeScript',
  'Vercel',
  'Stripe',
].map((tool) => ({
  title: tool,
  link: `https://example.com/${tool.toLowerCase()}`,
}));

const ToolsSection = () => {
  return <HoverEffect items={tools} className="my-custom-class" />;
};

export default ToolsSection;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/organisms/index.ts
───────────────────────────────────────────────
export { Section } from './Section';


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/organisms/Section.tsx
───────────────────────────────────────────────
import React from 'react';
import { cn } from '@with-nx/utils';

interface SectionProps {
  className?: string;
  children: React.ReactNode;
  style?: React.CSSProperties;
  fullWidth?: boolean;
}

export const Section: React.FC<SectionProps> = ({
  children,
  className,
  style,
  fullWidth = false,
}) => {
  const widthStyles = fullWidth ? 'max-w-full' : 'max-w-7xl';

  return (
    <section
      className={cn(
        'mx-auto space-y-6 py-6 md:py-12 px-4',
        className,
        widthStyles
      )}
      style={style}
    >
      {children}
    </section>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/pages/index.ts
───────────────────────────────────────────────
export {};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/atomic/templates/index.ts
───────────────────────────────────────────────
export {};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/Compare.tsx
───────────────────────────────────────────────
'use client';
import React, { useState, useEffect, useRef, useCallback } from 'react';
import { SparklesCore } from './Sparkles';
import { AnimatePresence, motion } from 'framer-motion';
import { cn } from '@with-nx/utils';
import { IconDotsVertical } from '@tabler/icons-react';
import Image from 'next/image';

interface CompareProps {
  firstImage?: string;
  secondImage?: string;
  className?: string;
  firstImageClassName?: string;
  secondImageClassname?: string;
  initialSliderPercentage?: number;
  slideMode?: 'hover' | 'drag';
  showHandlebar?: boolean;
  autoplay?: boolean;
  autoplayDuration?: number;
}
export const Compare = ({
  firstImage = '',
  secondImage = '',
  className,
  firstImageClassName,
  secondImageClassname,
  initialSliderPercentage = 50,
  slideMode = 'hover',
  showHandlebar = true,
  autoplay = false,
  autoplayDuration = 5000,
}: CompareProps) => {
  const [sliderXPercent, setSliderXPercent] = useState(initialSliderPercentage);
  const [isDragging, setIsDragging] = useState(false);

  const sliderRef = useRef<HTMLDivElement>(null);

  const [, setIsMouseOver] = useState(false);

  const autoplayRef = useRef<NodeJS.Timeout | null>(null);

  const startAutoplay = useCallback(() => {
    if (!autoplay) return;

    const startTime = Date.now();
    const animate = () => {
      const elapsedTime = Date.now() - startTime;
      const progress =
        (elapsedTime % (autoplayDuration * 2)) / autoplayDuration;
      const percentage = progress <= 1 ? progress * 100 : (2 - progress) * 100;

      setSliderXPercent(percentage);
      autoplayRef.current = setTimeout(animate, 16); // ~60fps
    };

    animate();
  }, [autoplay, autoplayDuration]);

  const stopAutoplay = useCallback(() => {
    if (autoplayRef.current) {
      clearTimeout(autoplayRef.current);
      autoplayRef.current = null;
    }
  }, []);

  useEffect(() => {
    startAutoplay();
    return () => stopAutoplay();
  }, [startAutoplay, stopAutoplay]);

  function mouseEnterHandler() {
    setIsMouseOver(true);
    stopAutoplay();
  }

  function mouseLeaveHandler() {
    setIsMouseOver(false);
    if (slideMode === 'hover') {
      setSliderXPercent(initialSliderPercentage);
    }
    if (slideMode === 'drag') {
      setIsDragging(false);
    }
    startAutoplay();
  }

  const handleStart = useCallback(
    (clientX: number) => {
      if (slideMode === 'drag') {
        setIsDragging(true);
      }
    },
    [slideMode]
  );

  const handleEnd = useCallback(() => {
    if (slideMode === 'drag') {
      setIsDragging(false);
    }
  }, [slideMode]);

  const handleMove = useCallback(
    (clientX: number) => {
      if (!sliderRef.current) return;
      if (slideMode === 'hover' || (slideMode === 'drag' && isDragging)) {
        const rect = sliderRef.current.getBoundingClientRect();
        const x = clientX - rect.left;
        const percent = (x / rect.width) * 100;
        requestAnimationFrame(() => {
          setSliderXPercent(Math.max(0, Math.min(100, percent)));
        });
      }
    },
    [slideMode, isDragging]
  );

  const handleMouseDown = useCallback(
    (e: React.MouseEvent) => handleStart(e.clientX),
    [handleStart]
  );
  const handleMouseUp = useCallback(() => handleEnd(), [handleEnd]);
  const handleMouseMove = useCallback(
    (e: React.MouseEvent) => handleMove(e.clientX),
    [handleMove]
  );

  const handleTouchStart = useCallback(
    (e: React.TouchEvent) => {
      if (!autoplay) {
        handleStart(e.touches[0].clientX);
      }
    },
    [handleStart, autoplay]
  );

  const handleTouchEnd = useCallback(() => {
    if (!autoplay) {
      handleEnd();
    }
  }, [handleEnd, autoplay]);

  const handleTouchMove = useCallback(
    (e: React.TouchEvent) => {
      if (!autoplay) {
        handleMove(e.touches[0].clientX);
      }
    },
    [handleMove, autoplay]
  );

  return (
    <div
      ref={sliderRef}
      className={cn('w-full h-[400px] overflow-hidden', className)}
      style={{
        position: 'relative',
        cursor: slideMode === 'drag' ? 'grab' : 'col-resize',
      }}
      onMouseMove={handleMouseMove}
      onMouseLeave={mouseLeaveHandler}
      onMouseEnter={mouseEnterHandler}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onTouchStart={handleTouchStart}
      onTouchEnd={handleTouchEnd}
      onTouchMove={handleTouchMove}
    >
      <AnimatePresence initial={false}>
        <motion.div
          className="absolute top-0 z-30 m-auto h-full w-px bg-gradient-to-b from-[rgba(255,255,255,0)] via-indigo-500 to-[rgba(255,255,255,0)]"
          style={{
            left: `${sliderXPercent}%`,
            top: '0',
            zIndex: 40,
          }}
          transition={{ duration: 0 }}
        >
          <div className="absolute top-1/2 left-0 z-20 h-full w-36 -translate-y-1/2 bg-gradient-to-r from-indigo-400 via-transparent to-transparent opacity-50 [mask-image:radial-gradient(100px_at_left,white,transparent)]" />
          <div className="absolute top-1/2 left-0 z-10 h-1/2 w-10 -translate-y-1/2 bg-gradient-to-r from-cyan-400 via-transparent to-transparent opacity-100 [mask-image:radial-gradient(50px_at_left,white,transparent)]" />
          <div className="absolute top-1/2 -right-10 h-3/4 w-10 -translate-y-1/2 [mask-image:radial-gradient(100px_at_left,white,transparent)]">
            <MemoizedSparklesCore
              background="transparent"
              minSize={0.4}
              maxSize={1}
              particleDensity={1200}
              className="h-full w-full"
              particleColor="#FFFFFF"
            />
          </div>
          {showHandlebar && (
            <div className="absolute top-1/2 -right-2.5 z-30 flex h-5 w-5 -translate-y-1/2 items-center   justify-center rounded-md bg-white shadow-[0px_-1px_0px_0px_#FFFFFF40]">
              <IconDotsVertical className="h-4 w-4 text-black" />
            </div>
          )}
        </motion.div>
      </AnimatePresence>
      <div className="pointer-events-none relative z-20 h-full w-full overflow-hidden">
        <AnimatePresence initial={false}>
          {firstImage ? (
            <motion.div
              className={cn(
                'absolute inset-0 z-20 rounded-2xl shrink-0 w-full h-full select-none overflow-hidden',
                firstImageClassName
              )}
              style={{
                clipPath: `inset(0 ${100 - sliderXPercent}% 0 0)`,
              }}
              transition={{ duration: 0 }}
            >
              <Image
                alt="first image"
                src={firstImage}
                fill
                className={cn(
                  'absolute inset-0 z-20 rounded-2xl shrink-0 w-full h-full select-none',
                  firstImageClassName
                )}
                draggable={false}
                priority
              />
            </motion.div>
          ) : null}
        </AnimatePresence>
      </div>

      <AnimatePresence initial={false}>
        {secondImage ? (
          <motion.img
            className={cn(
              'absolute top-0 left-0 z-[19]  rounded-2xl w-full h-full select-none',
              secondImageClassname
            )}
            alt="second image"
            src={secondImage}
            draggable={false}
          />
        ) : null}
      </AnimatePresence>
    </div>
  );
};

const MemoizedSparklesCore = React.memo(SparklesCore);

export default Compare;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogChatBot.tsx
───────────────────────────────────────────────
import React, { useState } from 'react';
import { Button } from '@with-nx/generic-ui';
import { fetchResponseFromAssistant } from './DevBlogOpenai';

interface ChatResponse {
  choices: {
    message: {
      content: string;
    };
  }[];
}

const ChatComponent = () => {
  const [input, setInput] = useState('');
  const [responses, setResponses] = useState<ChatResponse[]>([]);

  const handleInput = (e) => {
    setInput(e.target.value);
  };

  const handleSubmit = async () => {
    const response = await fetchResponseFromAssistant(input);
    if (response && response.choices && response.choices.length > 0) {
      setResponses((prevResponses) => [...prevResponses, response]);
    }
    setInput(''); // Clear input after sending
  };

  return (
    <div>
      <input value={input} onChange={handleInput} />
      <Button onClick={handleSubmit} text="Send" theme="primary" />
      <div>
        {responses.map((resp, index) => (
          <p key={index}>
            {resp.choices && resp.choices[0] && resp.choices[0].message
              ? resp.choices[0].message.content
              : 'Loading...'}
          </p>
        ))}
      </div>
    </div>
  );
};

export default ChatComponent;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogFooter.tsx
───────────────────────────────────────────────
import Link from 'next/link';
import { Flex } from '@with-nx/react-ui';
import { CustomRSHLogo } from '@with-nx/icons';
import { FiGithub, FiLinkedin, FiMail } from 'react-icons/fi';

import DevBlogSection from './DevBlogSection';

const DevBlogFooter = () => {
  return (
    <footer>
      <DevBlogSection className="!pt-0 !pb-8">
        <Flex className="mx-0 flex-row items-center justify-between space-y-2 py-4 pb-2 md:space-y-0 md:px-4 md:pb-0">
          <Link href="/" className="button-link" passHref>
            <CustomRSHLogo className="text-primary nav-logo ml-[-45px] h-24 w-24" />
          </Link>

          <Flex className="mr-2 justify-center space-x-4 py-4 sm:mt-0  md:mr-0 lg:pb-0 ">
            <a
              href="mailto:robert@robertshogan.com"
              target="_blank"
              aria-label="Email Robert"
            >
              <FiMail className="h-6 w-6" />
            </a>

            <a
              href="https://www.linkedin.com/in/robert-s-hogan/"
              target="_blank"
              aria-label="Robert Hogans LinkedIn Profile"
            >
              <FiLinkedin className="h-6 w-6" />
            </a>
            <a
              href="https://github.com/robert-s-hogan"
              target="_blank"
              aria-label="Robert Hogans GitHub Profile"
            >
              <FiGithub className="h-6 w-6" />
            </a>
          </Flex>
        </Flex>
      </DevBlogSection>
    </footer>
  );
};

export default DevBlogFooter;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogHeader.tsx
───────────────────────────────────────────────
import { Flex } from '@with-nx/react-ui';
import { IconButton } from '@with-nx/generic-ui';
import Link from 'next/link';
import { useTheme, ThemeType } from '@with-nx/theme';
import { FiMoon, FiSun, FiDownload } from 'react-icons/fi';
import { CustomRSHLogo } from '@with-nx/icons';
import { useState, useEffect } from 'react';
import { scrollToProjects } from '../utils/helper';

const logo = (
  <CustomRSHLogo className="text-primary nav-logo h-12 w-12 md:mb-2" />
);

const links = [
  { id: 'about', href: '#about', children: 'About' },
  { id: 'projects', href: '#projects', children: 'Projects' },
];

interface DevBlogHeaderProps {
  isHomePage: boolean;
}

const DevBlogHeader = ({ isHomePage }: DevBlogHeaderProps) => {
  const { theme, toggleTheme, fadeClass } = useTheme();

  // State to track if the component has mounted
  // (used for fade animations and controlling the toggle button)
  const [isMounted, setIsMounted] = useState(false);

  // State to manage header visibility (fades in/out on scroll, if home page)
  const [isVisible, setIsVisible] = useState(isHomePage ? false : true);

  // Track which link is currently active based on scroll
  const [activeLink, setActiveLink] = useState<string>('');

  useEffect(() => {
    // Make sure we always consider the component "mounted" on first render,
    // regardless of page. That way the toggle button can appear everywhere.
    setIsMounted(true);

    // If not on the home page, just show the header and skip scroll logic.
    if (!isHomePage) {
      setIsVisible(true);
      return;
    }

    // Only apply scroll-based visibility and active-link detection on home page
    const handleScroll = () => {
      if (window.scrollY > 350) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }

      const scrollPosition = window.scrollY + window.innerHeight / 2;
      let currentActiveLink = '';

      links.forEach((link) => {
        const section = document.querySelector(link.href) as HTMLElement;
        if (section) {
          const rect = section.getBoundingClientRect();
          const sectionTop = window.scrollY + rect.top;
          const sectionBottom = sectionTop + rect.height;

          if (sectionTop <= scrollPosition && sectionBottom > scrollPosition) {
            currentActiveLink = link.href;
          }
        }
      });

      setActiveLink(currentActiveLink);
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // run it once right away

    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [isHomePage]);

  // Only show the toggle button if the component is mounted
  // so we avoid hydration mismatch with SSR
  const toggleButton = isMounted ? (
    <IconButton
      onClick={toggleTheme}
      theme="transparent"
      className="border-0"
      label="Toggle Theme"
      icon={
        theme && (theme as ThemeType).name === 'light' ? (
          <FiMoon className={`moon h-4 w-4 ${fadeClass}`} />
        ) : (
          <FiSun className={`sun h-4 w-4 ${fadeClass}`} />
        )
      }
    />
  ) : null;

  return (
    <header
      className={`bg-surface fixed top-0 left-0 z-50 w-full transition-opacity duration-300 ${
        isVisible ? 'opacity-100' : 'pointer-events-none opacity-0'
      }`}
    >
      <div className="bg-bg-color container mx-auto max-w-full shadow-xl">
        <Flex className="container mx-auto flex-row items-center justify-between space-y-2 py-4 md:space-y-0">
          {/* LOGO AREA */}
          <Flex className="items-center">
            <Link
              href="/"
              className="button-link"
              aria-label="Robert Hogan's Home"
            >
              {logo}
            </Link>
            <Link href="/" className="hidden md:flex">
              <span>Robert Hogan</span>
            </Link>
          </Flex>

          {/* NAV + BUTTONS */}
          <Flex className="flex items-center space-x-4">
            {links.map((link) => (
              <Link
                key={link.id}
                href={isHomePage ? link.href : `/${link.href}`}
                className={`nav-link ${
                  activeLink === link.href ? 'active' : ''
                }`}
                onClick={(e) => {
                  // If on home page, smoothly scroll to the section
                  if (isHomePage) {
                    e.preventDefault();
                    scrollToProjects(link.id);
                  }
                }}
              >
                <span className="text-xs md:text-base">{link.children}</span>
              </Link>
            ))}

            {/* DOWNLOAD RESUME BUTTON with ICON */}
            <a
              href="https://rhogandev.wordpress.com/wp-content/uploads/2025/03/27.03.25-rh-resume.pdf"
              download
              className="inline-flex items-center space-x-1 leading-none"
            >
              <span className="text-xs md:text-base">Resume</span>
              <FiDownload className="h-4 w-4 align-middle" />
            </a>

            {/* THEME TOGGLE BUTTON */}
            {toggleButton}
          </Flex>
        </Flex>
      </div>
    </header>
  );
};

export default DevBlogHeader;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogHighlightedProject.tsx
───────────────────────────────────────────────
import Image from 'next/image';

import { Heading, Link } from '@with-nx/react-ui';
import { Text } from '@with-nx/generic-ui';

const DevBlogHighlightedProject = ({ project }) => {
  return (
    <div className="no-underline-on-hover relative w-full">
      <Link
        href={`/projects/${project.slug}`}
        className="no-underline-on-hover static"
      >
        <Image
          src={project.image}
          height={400}
          width={400}
          alt={project.title}
          className="h-[400px] w-full object-cover  md:h-[400px]"
          loading="lazy"
          sizes="(max-width: 767px) 90vw, (max-width: 1023px) 45vw, 400px"
        />

        <div className="bg-image-overlay !absolute inset-0 flex w-full flex-col items-center justify-center space-y-6 rounded bg-black/60 p-4 md:py-6 md:px-2">
          <Heading level={3} className="text-center">
            <span className="hidden md:inline-block">{project.title}</span>
            <span className="md:hidden">{project.mobileTitle}</span>
          </Heading>
          <Text className="w-full text-center" text={project.description} />
        </div>
      </Link>
    </div>
  );
};

export default DevBlogHighlightedProject;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogLayout.tsx
───────────────────────────────────────────────
import dynamic from 'next/dynamic';
import { PageLayout } from '@with-nx/react-ui';
import { useRouter } from 'next/router';
import { useScroll, useTransform } from 'framer-motion';
import React from 'react';

import { Seo } from '@with-nx/nextjs-react-ui';
import { PageLayoutProps } from '@with-nx/types';

import DevBlogHeader from './DevBlogHeader';
import { HeroEffect } from './HeroEffect';

const DevBlogFooter = dynamic(() => import('./DevBlogFooter'), { ssr: false });

const DevBlogLayout = ({
  children,
  className,
  title,
  description,
  hideNavBar: hideNavBarProp,
  hideNavBar = true,
}: PageLayoutProps) => {
  const router = useRouter();
  const asPath = router.asPath;
  const isHomePage = router.pathname === '/';
  const isCaseStudy = router.pathname.startsWith('/case-study');

  const hideMaxWidth7xl = asPath.includes('projects/dnd-interactive-map');
  const ref = React.useRef(null);
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ['start start', 'end start'],
  });

  const pathLengthFirst = useTransform(scrollYProgress, [0, 0.8], [0.2, 1.2]);
  const pathLengthSecond = useTransform(scrollYProgress, [0, 0.8], [0.15, 1.2]);
  const pathLengthThird = useTransform(scrollYProgress, [0, 0.8], [0.1, 1.2]);
  const pathLengthFourth = useTransform(scrollYProgress, [0, 0.8], [0.05, 1.2]);
  const pathLengthFifth = useTransform(scrollYProgress, [0, 0.8], [0, 1.2]);

  return (
    <PageLayout
      className={`min-h-screen w-full ${className}`}
      header={hideNavBarProp ? '' : <DevBlogHeader isHomePage={isHomePage} />}
      footer={<DevBlogFooter />}
    >
      <Seo
        title={
          title ? title : 'Robert Hogan - Front-End UI Engineer | Portfolio'
        }
        description={
          description
            ? description
            : 'Robert Hogan, a seasoned Front-End UI Engineer crafting efficient and user-centric digital experiences. Explore highlighted projects such as the p2w Draft Tool, React UI Library, and Concentration game.'
        }
        url="https://www.roberthogan.dev/"
        faviconPath="https://app-assets.vercel.app/apps/devblog/favicon.ico"
        image="https://app-assets.vercel.app/apps/devblog/rsh_logo.png"
        twitterHandle="@robert_s_hogan"
        siteName="Robert Hogans Portfolio"
        appleTouchIconPath="/apple-touch-icon.png"
        keywords="Robert Hogan, Front-End UI Engineer, Portfolio, p2w Draft Tool, React UI Library, Concentration, web development, digital experiences, fantasy football tool, Yahoo fantasy football, UI design, React."
      />
      {!hideNavBar && (
        <div
          className={`relative w-full max-w-full text-clip ${
            isHomePage ? 'h-[300vh]' : isCaseStudy ? 'h-[20vh]' : 'h-auto'
          }`}
          ref={ref}
        >
          {isHomePage && (
            <HeroEffect
              pathLengths={[
                pathLengthFirst,
                pathLengthSecond,
                pathLengthThird,
                pathLengthFourth,
                pathLengthFifth,
              ]}
            />
          )}
        </div>
      )}
      <div
        className={`mx-auto ${
          hideMaxWidth7xl ? 'max-w-full' : ''
        } selection:bg-primary ${className ? className : ''}`}
      >
        {children}
      </div>
    </PageLayout>
  );
};

export default DevBlogLayout;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogOpenai.tsx
───────────────────────────────────────────────
export const fetchResponseFromAssistant = async (prompt) => {
  try {
    const res = await fetch('/api/assistant', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt }),
    });

    const data = await res.json();
    return data;
  } catch (error) {
    console.error('Failed to fetch response:', error);
    return null;
  }
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogProjectsThemeSection.tsx
───────────────────────────────────────────────
import { Heading } from '@with-nx/react-ui';
import { Text } from '@with-nx/generic-ui';
const DevBlogProjectsThemeSection = ({ title, description }) => (
  <div className="my-12">
    <Heading level={2} className="text-xl md:text-5xl">
      {title}
    </Heading>
    <Text text={description} />
  </div>
);

export default DevBlogProjectsThemeSection;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/DevBlogSection.tsx
───────────────────────────────────────────────
import { Section } from '@with-nx/generic-ui';
import { cn } from '@with-nx/utils';

interface DevBlogSectionProps {
  className?: string;
  children: React.ReactNode;
  style?: React.CSSProperties;
  fullWidth?: boolean;
}

const DevBlogSection = ({
  className,
  children,
  style,
  fullWidth,
}: DevBlogSectionProps) => {
  const widthStyles = fullWidth ? 'max-w-full' : 'max-w-7xl';
  return (
    <Section
      className={`container mx-auto space-y-6 py-6 px-4 md:py-12 ${cn(
        className,
        widthStyles
      )}`}
      style={style}
    >
      {children}
    </Section>
  );
};

export default DevBlogSection;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/HeroEffect.tsx
───────────────────────────────────────────────
'use client';

import React from 'react';
import { motion, MotionValue } from 'framer-motion';

import { cn } from '@with-nx/utils';

const transition = {
  duration: 0,
  ease: 'linear',
};

export const HeroEffect = ({
  pathLengths,
  title,
  description,
  className,
}: {
  pathLengths: MotionValue[];
  title?: string;
  description?: string;
  className?: string;
}) => {
  return (
    <div className={cn('sticky top-48 md:top-64', className)}>
      <p className="bg-gradient-to-b from-neutral-100 to-neutral-300 bg-clip-text pb-4 text-center text-lg font-normal text-transparent dark:from-neutral-200 dark:to-neutral-400 md:text-7xl">
        {title || `Hey, I'm Robert!`}
      </p>
      <p className="mx-auto mt-4 max-w-lg text-center text-xs font-normal text-neutral-600 dark:text-neutral-400 md:text-xl">
        {description ? (
          description
        ) : (
          <span className="mb-8 max-w-md text-xl">
            Experienced web developer who{' '}
            <span className="text-primary">enjoys</span> building{' '}
            <span className="text-primary">fast</span> and{' '}
            <span className="text-primary">accessible</span> digital products.
          </span>
        )}
      </p>
      {/* <div className="w-full h-[890px] -top-60 md:-top-40 flex items-center justify-center bg-red-transparent absolute">
        <Button
          theme="primary"
          className="font-bold bg-white rounded-full md:px-4 md:py-2 px-2 py-1 md:mt-24 mt-8 z-30 md:text-base text-black text-xs w-fit mx-auto"
          text="About Me"
          onClick={scrollToAboutMe}
        />
      </div> */}
      <svg
        width="1440"
        height="890"
        viewBox="0 0 1440 890"
        xmlns="http://www.w3.org/2000/svg"
        className="absolute top-[-12rem] w-full md:top-[-10rem]"
      >
        <motion.path
          d="M0 663C145.5 663 191 666.265 269 647C326.5 630 339.5 621 397.5 566C439 531.5 455 529.5 490 523C509.664 519.348 521 503.736 538 504.236C553.591 504.236 562.429 514.739 584.66 522.749C592.042 525.408 600.2 526.237 607.356 523.019C624.755 515.195 641.446 496.324 657 496.735C673.408 496.735 693.545 519.572 712.903 526.769C718.727 528.934 725.184 528.395 730.902 525.965C751.726 517.115 764.085 497.106 782 496.735C794.831 496.47 804.103 508.859 822.469 518.515C835.13 525.171 850.214 526.815 862.827 520.069C875.952 513.049 889.748 502.706 903.5 503.736C922.677 505.171 935.293 510.562 945.817 515.673C954.234 519.76 963.095 522.792 972.199 524.954C996.012 530.611 1007.42 534.118 1034 549C1077.5 573.359 1082.5 594.5 1140 629C1206 670 1328.5 662.5 1440 662.5"
          stroke="#FFB7C5"
          strokeWidth="2"
          fill="none"
          initial={{
            pathLength: 0,
          }}
          style={{
            pathLength: pathLengths[0],
          }}
          transition={transition}
        />
        <motion.path
          d="M0 587.5C147 587.5 277 587.5 310 573.5C348 563 392.5 543.5 408 535C434 523.5 426 526.235 479 515.235C494 512.729 523 510.435 534.5 512.735C554.5 516.735 555.5 523.235 576 523.735C592 523.735 616 496.735 633 497.235C648.671 497.235 661.31 515.052 684.774 524.942C692.004 527.989 700.2 528.738 707.349 525.505C724.886 517.575 741.932 498.33 757.5 498.742C773.864 498.742 791.711 520.623 810.403 527.654C816.218 529.841 822.661 529.246 828.451 526.991C849.246 518.893 861.599 502.112 879.5 501.742C886.47 501.597 896.865 506.047 907.429 510.911C930.879 521.707 957.139 519.639 982.951 520.063C1020.91 520.686 1037.5 530.797 1056.5 537C1102.24 556.627 1116.5 570.704 1180.5 579.235C1257.5 589.5 1279 587 1440 588"
          stroke="#FFDDB7"
          strokeWidth="2"
          fill="none"
          initial={{
            pathLength: 0,
          }}
          style={{
            pathLength: pathLengths[1],
          }}
          transition={transition}
        />
        <motion.path
          d="M0 514C147.5 514.333 294.5 513.735 380.5 513.735C405.976 514.94 422.849 515.228 436.37 515.123C477.503 514.803 518.631 506.605 559.508 511.197C564.04 511.706 569.162 512.524 575 513.735C588 516.433 616 521.702 627.5 519.402C647.5 515.402 659 499.235 680.5 499.235C700.5 499.235 725 529.235 742 528.735C757.654 528.735 768.77 510.583 791.793 500.59C798.991 497.465 807.16 496.777 814.423 499.745C832.335 507.064 850.418 524.648 866 524.235C882.791 524.235 902.316 509.786 921.814 505.392C926.856 504.255 932.097 504.674 937.176 505.631C966.993 511.248 970.679 514.346 989.5 514.735C1006.3 515.083 1036.5 513.235 1055.5 513.235C1114.5 513.235 1090.5 513.235 1124 513.235C1177.5 513.235 1178.99 514.402 1241 514.402C1317.5 514.402 1274.5 512.568 1440 513.235"
          stroke="#B1C5FF"
          strokeWidth="2"
          fill="none"
          initial={{
            pathLength: 0,
          }}
          style={{
            pathLength: pathLengths[2],
          }}
          transition={transition}
        />
        <motion.path
          d="M0 438.5C150.5 438.5 261 438.318 323.5 456.5C351 464.5 387.517 484.001 423.5 494.5C447.371 501.465 472 503.735 487 507.735C503.786 512.212 504.5 516.808 523 518.735C547 521.235 564.814 501.235 584.5 501.235C604.5 501.235 626 529.069 643 528.569C658.676 528.569 672.076 511.63 695.751 501.972C703.017 499.008 711.231 498.208 718.298 501.617C735.448 509.889 751.454 529.98 767 529.569C783.364 529.569 801.211 507.687 819.903 500.657C825.718 498.469 832.141 499.104 837.992 501.194C859.178 508.764 873.089 523.365 891 523.735C907.8 524.083 923 504.235 963 506.735C1034.5 506.735 1047.5 492.68 1071 481.5C1122.5 457 1142.23 452.871 1185 446.5C1255.5 436 1294 439 1439.5 439"
          stroke="#4FABFF"
          strokeWidth="2"
          fill="none"
          initial={{
            pathLength: 0,
          }}
          style={{
            pathLength: pathLengths[3],
          }}
          transition={transition}
        />
        <motion.path
          d="M0.5 364C145.288 362.349 195 361.5 265.5 378C322 391.223 399.182 457.5 411 467.5C424.176 478.649 456.916 491.677 496.259 502.699C498.746 503.396 501.16 504.304 503.511 505.374C517.104 511.558 541.149 520.911 551.5 521.236C571.5 521.236 590 498.736 611.5 498.736C631.5 498.736 652.5 529.236 669.5 528.736C685.171 528.736 697.81 510.924 721.274 501.036C728.505 497.988 736.716 497.231 743.812 500.579C761.362 508.857 778.421 529.148 794 528.736C810.375 528.736 829.35 508.68 848.364 502.179C854.243 500.169 860.624 500.802 866.535 502.718C886.961 509.338 898.141 519.866 916 520.236C932.8 520.583 934.5 510.236 967.5 501.736C1011.5 491 1007.5 493.5 1029.5 480C1069.5 453.5 1072 440.442 1128.5 403.5C1180.5 369.5 1275 360.374 1439 364"
          stroke="#076EFF"
          strokeWidth="2"
          fill="none"
          initial={{
            pathLength: 0,
          }}
          style={{
            pathLength: pathLengths[4],
          }}
          transition={transition}
        />

        <defs>
          <filter id="blurMe">
            <feGaussianBlur in="SourceGraphic" stdDeviation="5" />
          </filter>
        </defs>
      </svg>
    </div>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/index.ts
───────────────────────────────────────────────
export * from './atomic/atoms';
export * from './atomic/molecules';
export * from './atomic/organisms';
export * from './atomic/templates';
export * from './atomic/pages';


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/creature-generator/creature-generator-data.ts
───────────────────────────────────────────────
import {
  species,
  dndSizes,
  alignments,
  environments,
  specialTraits,
  languages,
} from '@with-nx/constants';

export const toSelectOptions = (items) =>
  items.map((item) => ({ label: item, value: item }));

export const fieldConfigs = [
  { name: 'numberOfPlayers', label: 'Number of Players', type: 'text' },
  { name: 'playerLevel', label: 'Player Level', type: 'text' },
  {
    name: 'challengeRating',
    label: 'Challenge Rating',
    type: 'select',
    options: toSelectOptions(Array.from({ length: 30 }, (_, i) => i + 1)),
  },
  {
    name: 'creatureType',
    label: 'Creature Type',
    type: 'select',
    options: toSelectOptions(species),
  },
  {
    name: 'alignment',
    label: 'Alignment',
    type: 'select',
    options: toSelectOptions(alignments),
  },
  {
    name: 'environment',
    label: 'Environment',
    type: 'select',
    options: toSelectOptions(environments),
  },
  {
    name: 'size',
    label: 'Size',
    type: 'select',
    options: toSelectOptions(dndSizes),
  },
  {
    name: 'specialTrait',
    label: 'Special Trait',
    type: 'select',
    options: toSelectOptions(specialTraits),
  },
  {
    name: 'language',
    label: 'Language',
    type: 'select',
    options: toSelectOptions(languages),
  },
];


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/creature-generator/creature-generator-utils.ts
───────────────────────────────────────────────
export async function fetchCreatureData(userFormState) {
  const url = '/api/creature-generator/generate';
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userFormState),
    });

    console.log('Fetch response:', response);

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Error response text:', errorText);
      throw new Error(`Server responded with status: ${response.status}`);
    }

    const data = await response.text();
    try {
      const json = JSON.parse(data);
      return json;
    } catch (error) {
      console.error('Failed to parse JSON:', data);
      throw new Error('Failed to parse JSON: ' + error.message);
    }
  } catch (error) {
    console.error('Network or server error:', error.message);
    throw error;
  }
}

export async function loadImage(imagePrompt) {
  try {
    const imageResponse = await fetch('/api/creature-generator/generateImage', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ imagePrompt }),
    });

    const imageData = await imageResponse.json();
    if (imageResponse.status !== 200) {
      throw new Error(
        imageData.error
          ? `Image request failed with message: ${imageData.error.message}`
          : `Image request failed with status ${imageResponse.status}`
      );
    }

    return imageData.imageUrl;
  } catch (error) {
    console.error(`Error with image API request: ${error}`);
    throw error; // Rethrow the error to be handled in the component
  }
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/creature-generator/CreatureCard.tsx
───────────────────────────────────────────────
import { Flex } from '@with-nx/generic-ui';

export interface Creature {
  armorClass?: number;
  hitPoints?: number;
  speed?: string;
  strength?: number;
  dexterity?: number;
  constitution?: number;
  intelligence?: number;
  wisdom?: number;
  charisma?: number;
  actions?: Array<{ name: string; damage: string; reach?: string }>;
  specialAbilities?: Array<{ name: string; description: string }>;
  imagePrompt?: string;
  name?: string;
  description?: string;
}

export interface CreatureCardProps {
  creature: Creature;
}

export const CreatureCard = ({ creature }: CreatureCardProps) => {
  if (!creature) {
    return <div className="py-5 text-center">No creature data</div>;
  }

  const {
    name,
    description,
    armorClass,
    hitPoints,
    speed,
    strength,
    dexterity,
    constitution,
    intelligence,
    wisdom,
    charisma,
    actions = [],
    specialAbilities = [],
  } = creature;

  return (
    <div className="w-full bg-white p-5 shadow-xl">
      <h2 className="text-2xl font-bold text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <div className="mt-4 grid grid-cols-3 gap-4 text-gray-800">
        <div>
          <strong>Armor Class:</strong> {armorClass}
        </div>
        <div>
          <strong>Hit Points:</strong> {hitPoints}
        </div>
        <div>
          <strong>Speed:</strong> {speed}
        </div>
        <Flex className="w-full justify-between">
          <div>
            <strong>STR</strong> {strength}
          </div>
          <div>
            <strong>DEX</strong> {dexterity}
          </div>
          <div>
            <strong>CON</strong> {constitution}
          </div>
          <div>
            <strong>INT</strong> {intelligence}
          </div>
          <div>
            <strong>WIS</strong> {wisdom}
          </div>
          <div>
            <strong>CHA</strong> {charisma}
          </div>
        </Flex>
      </div>
      <div className="mt-4 text-gray-600">
        <strong className="block">Actions:</strong>
        {actions.length > 0 ? (
          <ul className="list-disc pl-5">
            {actions.map((action, index) => (
              <li key={index} className="mt-1">
                {action.name}({action.reach} ft): {action.damage}
              </li>
            ))}
          </ul>
        ) : (
          <div>No actions available</div>
        )}
      </div>
      <div className="mt-4 text-gray-600">
        <strong className="block">Special Abilities:</strong>
        {specialAbilities.length > 0 ? (
          <ul className="list-disc pl-5">
            {specialAbilities.map((ability, index) => (
              <li key={index} className="mt-1">
                {ability.name}: {ability.description}
              </li>
            ))}
          </ul>
        ) : (
          <div>No special abilities available</div>
        )}
      </div>
    </div>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/creature-generator/CreatureGeneratorForm.tsx
───────────────────────────────────────────────
import React, { useState, useEffect } from 'react';
import { Button } from '@with-nx/generic-ui';
import {
  species,
  dndSizes,
  alignments,
  environments,
  specialTraits,
  languages,
} from '@with-nx/constants';

// Helper function to convert array items to select options
const toSelectOptions = (items) =>
  items.map((item) => ({ label: item, value: item }));

// Configuration for form fields
const fieldConfigs = [
  {
    name: 'numberOfPlayers',
    label: 'Number of Players',
    type: 'text',
  },
  {
    name: 'playerLevel',
    label: 'Player Level',
    type: 'text',
  },
  {
    name: 'challengeRating',
    label: 'Challenge Rating',
    type: 'select',
    options: toSelectOptions(Array.from({ length: 30 }, (_, i) => i + 1)),
  },
  {
    name: 'creatureType',
    label: 'Creature Type',
    type: 'select',
    options: toSelectOptions(species),
  },
  {
    name: 'alignment',
    label: 'Alignment',
    type: 'select',
    options: toSelectOptions(alignments),
  },
  {
    name: 'environment',
    label: 'Environment',
    type: 'select',
    options: toSelectOptions(environments),
  },
  {
    name: 'size',
    label: 'Size',
    type: 'select',
    options: toSelectOptions(dndSizes),
  },
  {
    name: 'specialTrait',
    label: 'Special Trait',
    type: 'select',
    options: toSelectOptions(specialTraits),
  },
  {
    name: 'language',
    label: 'Language',
    type: 'select',
    options: toSelectOptions(languages),
  },
];

// Validation function
const validateField = (name, value) => {
  if (!value) {
    return 'This field is required';
  }
  return '';
};

const CreatureGeneratorForm = ({ onSubmit, initialValues }) => {
  const [formValues, setFormValues] = useState(
    fieldConfigs.reduce(
      (values, field) => ({
        ...values,
        [field.name]: initialValues[field.name] || '', // Make sure each field is initialized from initialValues
      }),
      {}
    )
  );

  const [errors, setErrors] = useState({});

  useEffect(() => {
    // This effect updates formValues when initialValues change
    setFormValues(
      fieldConfigs.reduce(
        (values, field) => ({
          ...values,
          [field.name]: initialValues[field.name] || '',
        }),
        {}
      )
    );
  }, [initialValues]);

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormValues((prev) => ({ ...prev, [name]: value }));
    setErrors((prev) => ({ ...prev, [name]: validateField(name, value) }));
  };

  const resetForm = () => {
    setFormValues(
      fieldConfigs.reduce(
        (values, field) => ({ ...values, [field.name]: '' }),
        {}
      )
    );
    setErrors({});
  };

  const [formKey, setFormKey] = useState(0);

  const handleSubmit = (event) => {
    event.preventDefault();
    let valid = true;
    const newErrors = {};
    Object.keys(formValues).forEach((field) => {
      const error = validateField(field, formValues[field]);
      if (error) {
        newErrors[field] = error;
        valid = false;
      }
    });
    setErrors(newErrors);

    if (valid) {
      onSubmit(formValues);
      resetForm();
      setFormKey((prevKey) => prevKey + 1); // Increment key to force form remount
    }
  };

  useEffect(() => {
    console.log('Initial form values set:', initialValues);
  }, [initialValues]);

  return (
    <form
      key={formKey}
      className="grid grid-cols-1 gap-4 md:grid-cols-3"
      onSubmit={handleSubmit}
    >
      {fieldConfigs.map(({ name, label, type, options }) => (
        <div key={name} className="flex flex-col">
          <label htmlFor={name}>{label}</label>
          <select
            name={name}
            value={formValues[name]}
            onChange={handleChange}
            className="input-field"
            disabled={type !== 'select'}
          >
            {options &&
              options.map((option) => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
          </select>
          <input
            type="text"
            name={name}
            value={formValues[name]}
            onChange={handleChange}
            className="input-field"
            disabled={type === 'select'}
          />
          {errors[name] && <div className="error-message">{errors[name]}</div>}
        </div>
      ))}
      <Button
        theme="primary"
        type="submit"
        className="col-span-3"
        text="Generate Creature"
      />
    </form>
  );
};

export default CreatureGeneratorForm;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/creature-generator/CreatureGeneratorRandomLoadingMessage.tsx
───────────────────────────────────────────────
import React from 'react';
import { loadingMessages } from '@with-nx/constants';

function CreatureGeneratorRandomLoadingMessage() {
  const randomIndex = Math.floor(Math.random() * loadingMessages.length);
  const message = loadingMessages[randomIndex];

  return (
    <div className="fixed inset-0 flex items-center justify-center bg-black/50">
      <p className="animate-pulse text-2xl font-semibold text-white">
        {message}
      </p>
    </div>
  );
}

export default CreatureGeneratorRandomLoadingMessage;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/creature-generator/useForm.tsx
───────────────────────────────────────────────
import { useState } from 'react';
import * as Yup from 'yup';

// Validation schema using Yup
const formSchema = Yup.object().shape({
  numberOfPlayers: Yup.string().required('Number of players is required'),
  playerLevel: Yup.string().required('Player level is required'),
  challengeRating: Yup.string().required('Challenge rating is required'),
  creatureType: Yup.string().required('Creature type is required'),
  alignment: Yup.string().required('Alignment is required'),
  environment: Yup.string().required('Environment is required'),
  size: Yup.string().required('Size is required'),
  specialTrait: Yup.string().required('Special trait is required'),
  language: Yup.string().required('Language is required'),
});

function useForm(initialValues) {
  const [formState, setFormState] = useState(initialValues);
  const [errors, setErrors] = useState({});

  const validate = async (values) => {
    try {
      await formSchema.validate(values, { abortEarly: false });
      setErrors({});
      return true;
    } catch (err) {
      const newErrors = err.inner.reduce(
        (acc, error) => ({
          ...acc,
          [error.path]: error.message,
        }),
        {}
      );
      setErrors(newErrors);
      return false;
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormState((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (callback) => {
    if (await validate(formState)) {
      callback(formState);
    }
  };

  return {
    formState,
    errors,
    handleChange,
    handleSubmit,
  };
}

export default useForm;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/KonvaMap.tsx
───────────────────────────────────────────────
import React, { useState, useEffect, useCallback } from 'react';
import { Stage, Layer } from 'react-konva';

import {
  generateMonsters,
  generateParty,
  generateStructures,
} from './map-module/utils';
import Party from './map-module/components/Party';
import Monsters from './map-module/components/Monsters';
import Structures from './map-module/components/Structures';

import CharacterPopover from './zoom-in/character-popover';

const KonvaMap = () => {
  const [selectedCharacter, setSelectedCharacter] = useState(null);
  const [stageScale, setStageScale] = useState(1);
  const [stageX, setStageX] = useState(0);
  const [stageY, setStageY] = useState(0);
  const [monsters] = useState(generateMonsters());
  const [party] = useState(generateParty());
  const [structures] = useState(generateStructures());

  const handleWheel = useCallback((e) => {
    e.evt.preventDefault();

    const scaleBy = 1.01;
    const stage = e.target.getStage();
    const oldScale = stage.scaleX();

    const mousePointTo = {
      x: stage.getPointerPosition().x / oldScale - stage.x() / oldScale,
      y: stage.getPointerPosition().y / oldScale - stage.y() / oldScale,
    };

    const newScale = e.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;

    setStageScale(newScale);
    setStageX(
      -(mousePointTo.x - stage.getPointerPosition().x / newScale) * newScale
    );
    setStageY(
      -(mousePointTo.y - stage.getPointerPosition().y / newScale) * newScale
    );
  }, []);

  const defaultDragBoundFunc = (pos) => pos;

  const handleTouchMove = (e) => {
    e.evt.preventDefault();
  };

  const [stageSize, setStageSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  });

  useEffect(() => {
    const handleResize = () => {
      setStageSize({ width: window.innerWidth, height: window.innerHeight });
    };
    window.addEventListener('resize', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return (
    <div className="border-primary m-16 border-2">
      <Stage
        width={stageSize.width}
        height={stageSize.height}
        scaleX={stageScale}
        scaleY={stageScale}
        x={stageX}
        y={stageY}
        draggable
        onDragEnd={(e) => {
          setStageX(e.target.x());
          setStageY(e.target.y());
        }}
        onTouchMove={handleTouchMove}
        onWheel={handleWheel}
      >
        <Layer>
          <Party
            party={party}
            dragBoundFunc={defaultDragBoundFunc}
            onClick={() => setSelectedCharacter('Party')}
          />
          <Monsters
            monsters={monsters}
            dragBoundFunc={defaultDragBoundFunc}
            onClick={() => setSelectedCharacter('Monster')}
          />
          <Structures
            structures={structures}
            dragBoundFunc={defaultDragBoundFunc}
            onClick={() => setSelectedCharacter('Structure')}
          />
        </Layer>
      </Stage>

      <CharacterPopover
        item={selectedCharacter}
        onClose={() => setSelectedCharacter(null)}
      />
    </div>
  );
};

export default KonvaMap;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/components/context-menu.tsx
───────────────────────────────────────────────
import { ReactNode, useEffect, MouseEvent } from 'react';

interface ContextMenuOption {
  label: string;
  onClick: () => void;
}

interface ContextMenuProps {
  children?: ReactNode;
  position: { x: number; y: number };
  onClose: () => void;
  options: ContextMenuOption[];
}

const ContextMenu = ({
  children,
  position,
  onClose,
  options,
}: ContextMenuProps) => {
  const { x, y } = position;

  useEffect(() => {
    const listener = (event: MouseEvent | Event) => {
      onClose();
    };

    window.addEventListener('click', listener);

    return () => {
      window.removeEventListener('click', listener);
    };
  }, [onClose]);

  return (
    <div
      className="absolute z-50 rounded bg-white py-2 text-black shadow-md"
      style={{ top: y, left: x }}
    >
      {options.map((option, index) => (
        <div
          onClick={option.onClick}
          key={index}
          className="cursor-pointer px-4 py-2 hover:bg-gray-100"
        >
          {option.label}
        </div>
      ))}
    </div>
  );
};

export default ContextMenu;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/components/Monsters/index.tsx
───────────────────────────────────────────────
import MonsterEntity from './MonsterEntity';

interface Monster {
  id: number;
  x: number;
  y: number;
  className: string;
}

interface MonsterGroupProps {
  monsters: Monster[];
  dragBoundFunc: (pos: { x: number; y: number }) => { x: number; y: number };
  onClick: () => void;
}

const MonsterGroup = ({
  monsters,
  dragBoundFunc,
  onClick,
}: MonsterGroupProps) => {
  return monsters.map((monster) => (
    <MonsterEntity
      key={`monster-${monster.id}`}
      id={monster.id}
      name={monster.className}
      x={monster.x}
      y={monster.y}
      className={monster.className}
      draggable
      dragBoundFunc={dragBoundFunc}
      onClick={onClick}
    />
  ));
};

export default MonsterGroup;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/components/Monsters/MonsterEntity.tsx
───────────────────────────────────────────────
import { Group } from 'react-konva';
import { GoblinIcon, DragonIcon, SkeletonIcon } from '../../icons';

const MonsterEntity = ({
  id,
  name,
  x,
  y,
  draggable,
  dragBoundFunc,
  className,
  onClick,
}) => {
  const classShape = () => {
    switch (className) {
      case 'goblin':
        return GoblinIcon;
      case 'skeleton':
        return SkeletonIcon;
      case 'dragon':
        return DragonIcon;
      default:
        return null;
    }
  };

  return (
    <Group
      id={id}
      x={x}
      y={y}
      draggable={draggable}
      dragBoundFunc={dragBoundFunc}
      onClick={onClick}
    >
      {classShape()}
    </Group>
  );
};

export default MonsterEntity;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/components/Party/index.tsx
───────────────────────────────────────────────
import PartyMember from './PartyMember';

interface Player {
  id: string;
  className: string;
  x: number;
  y: number;
}

interface PartyGroupProps {
  party: Player[];
  dragBoundFunc: (pos: { x: number; y: number }) => { x: number; y: number };
  onClick: () => void;
}

const PartyGroup = ({ party, dragBoundFunc, onClick }: PartyGroupProps) => {
  return party.map((player) => (
    <PartyMember
      key={player.id}
      id={player.id}
      name={player.className}
      x={player.x}
      y={player.y}
      className={player.className}
      draggable
      dragBoundFunc={dragBoundFunc}
      onClick={onClick}
    />
  ));
};

export default PartyGroup;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/components/Party/PartyMember.tsx
───────────────────────────────────────────────
import { Group } from 'react-konva';
import { FighterIcon, WizardIcon, BarbarianIcon } from '../../icons';

interface PartyMemberProps {
  id: string;
  x: number;
  y: number;
  draggable: boolean;
  dragBoundFunc: (pos: { x: number; y: number }) => { x: number; y: number };
  className: string;
  onClick: () => void;
  name: string; // add this
}

const PartyMember = ({
  id,
  x,
  y,
  draggable,
  dragBoundFunc,
  className,
  onClick,
  name, // receive this
}: PartyMemberProps) => {
  const classShape = () => {
    switch (className) {
      case 'barbarian':
        return BarbarianIcon;
      case 'wizard':
        return WizardIcon;
      case 'fighter':
        return FighterIcon;
      default:
        return null;
    }
  };

  return (
    <Group
      id={id}
      x={x}
      y={y}
      draggable={draggable}
      dragBoundFunc={dragBoundFunc}
      onClick={onClick}
    >
      {classShape()}
    </Group>
  );
};

export default PartyMember;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/components/Structures/index.tsx
───────────────────────────────────────────────
import StructureEntity from './StructureEntity';

interface Structure {
  id: number;
  x: number;
  y: number;
  className: string;
}

interface StructureGroupProps {
  structures: Structure[];
  dragBoundFunc: (pos: { x: number; y: number }) => { x: number; y: number };
  onClick: () => void;
}

const StructureGroup = ({
  structures,
  dragBoundFunc,
  onClick,
}: StructureGroupProps) => {
  return (
    <>
      {structures.map((structure) => (
        <StructureEntity
          key={`structure-${structure.id}`}
          id={structure.id.toString()}
          name={structure.className}
          x={structure.x}
          y={structure.y}
          className={structure.className}
          draggable
          dragBoundFunc={dragBoundFunc}
          onClick={onClick}
        />
      ))}
    </>
  );
};

export default StructureGroup;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/components/Structures/StructureEntity.tsx
───────────────────────────────────────────────
import { useState } from 'react';
import { Group } from 'react-konva';
import ContextMenu from '../context-menu';
import { ObeliskIcon, TowerIcon, HouseIcon } from '../../icons';

interface StructureProps {
  id: string;
  name: string;
  x: number;
  y: number;
  className: string;
  draggable: boolean;
  dragBoundFunc: (pos: { x: number; y: number }) => { x: number; y: number };
  onClick: () => void;
}

const StructureEntity = ({
  id,
  name,
  x,
  y,
  className,
  draggable,
  dragBoundFunc,
  onClick,
}: StructureProps) => {
  const [isLocked, setIsLocked] = useState(false);
  const [contextMenuPosition, setContextMenuPosition] = useState(null);

  const classShape = () => {
    switch (className) {
      case 'obelisk':
        return ObeliskIcon;
      case 'tower':
        return TowerIcon;
      case 'house':
        return HouseIcon;
      default:
        return null;
    }
  };

  // Add a new event handler for the right-click event
  const handleRightClick = (event) => {
    // Prevent the default context menu from showing up
    event.evt.preventDefault();

    // Show the custom context menu at the position of the right-click
    setContextMenuPosition({
      x: event.evt.clientX,
      y: event.evt.clientY,
    });
  };

  const handleClick = () => {
    if (!isLocked && onClick) {
      onClick();
    }
  };

  const handleLockToggle = () => {
    setIsLocked(!isLocked);
    setContextMenuPosition(null); // Close the context menu after clicking
  };

  return (
    <Group
      id={id}
      name={name}
      x={x}
      y={y}
      draggable={!isLocked && draggable}
      dragBoundFunc={dragBoundFunc}
      onClick={handleClick}
      onContextMenu={handleRightClick}
    >
      {classShape()}

      {/* Render the context menu if its position is defined */}
      {contextMenuPosition && (
        <ContextMenu
          position={contextMenuPosition}
          onClose={() => setContextMenuPosition(null)}
          options={[
            {
              label: isLocked ? 'Unlock' : 'Lock',
              onClick: handleLockToggle,
            },
          ]}
        >
          {/* Add a menu item to toggle the "lock" state */}
          <div onClick={handleLockToggle}>{isLocked ? 'Unlock' : 'Lock'}</div>
        </ContextMenu>
      )}
    </Group>
  );
};

export default StructureEntity;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/icons/index.tsx
───────────────────────────────────────────────
import { Group, Path } from 'react-konva';

export const FighterIcon = (
  <Group scale={{ x: 0.08, y: 0.08 }}>
    <Path
      data="M255.996 0C209.875 55.353 136.065 87.638 53.039 92.25v189.12C53.039 405.914 255.996 512 255.996 512s202.966-106.086 202.966-230.63V92.25C375.926 87.638 302.116 55.353 255.996 0z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const WizardIcon = (
  <Group scale={{ x: 1, y: 1 }}>
    <Path
      data="M24 40c11.046 0 20-1.79 20-4 0-1.439-3.299-2.7-9-3.405L27 12 15 8l3 6-5 18.595C7.299 33.3 4 34.56 4 36c0 2.21 8.954 4 20 4Z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const BarbarianIcon = (
  <Group scale={{ x: 1, y: 1 }}>
    <Path
      data="m13.742 21.83 8.272-8.272-.441-.441 1.875-1.875-2.726-2.726-1.875 1.875-.441-.441-.341.341c-1.184-2.35-.963-5.218 1.157-8.84C8.92-2.685-2.193 9.862 1.372 19.7c3.339-1.941 6.782-2.769 9.352-2.067l-.589.589.441.441-9.905 9.905v2.838h2.614l10.017-10.017.441.441zm16.836-9.023c-3.673 2.149-6.565 2.354-8.93 1.117l-7.278 7.278c.755 2.58-.072 6.068-2.041 9.455 9.838 3.564 22.385-7.548 18.249-17.85z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const HouseIcon = (
  <Group scale={{ x: 0.6, y: 0.6 }}>
    <Path
      data="M62.79,29.172l-28-28C34.009,0.391,32.985,0,31.962,0s-2.047,0.391-2.828,1.172l-28,28
      c-1.562,1.566-1.484,4.016,0.078,5.578c1.566,1.57,3.855,1.801,5.422,0.234L8,33.617V60c0,2.211,1.789,4,4,4h16V48h8v16h16
      c2.211,0,4-1.789,4-4V33.695l1.195,1.195c1.562,1.562,3.949,1.422,5.516-0.141C64.274,33.188,64.356,30.734,62.79,29.172z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const TowerIcon = (
  <Group scale={{ x: 1, y: 1 }}>
    <Path
      data="M28.282 30.628l-1.791-5.793h-2.456v-11.772l3.816-4.731v-6.934h-4.020v3.27h-2.447v-3.27h-4.064v3.27h-2.403v-3.27h-4.064v3.27h-2.403v-3.27h-4.020v6.934l3.816 4.731v11.772h-2.456l-1.791 5.793z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const ObeliskIcon = (
  <Group scale={{ x: 2, y: 2 }}>
    <Path
      data="M12.25 12.25h-.37L11 2.87a1.21 1.21 0 0 0-.38-.78L8.87.35a1.25 1.25 0 0 0-1.74 0L5.34 2.09a1.21 1.21 0 0 0-.34.78l-.84 9.38h-.41A1.26 1.26 0 0 0 2.5 13.5V16h11v-2.5a1.26 1.26 0 0 0-1.25-1.25zM6.2 3 8 1.25 9.8 3l.83 9.27H5.37zm6.05 11.77h-8.5V13.5h8.5z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const GoblinIcon = (
  <Group scale={{ x: 0.08, y: 0.08 }}>
    <Path
      data="M256 33c-8.5 0-21.318 5.745-35.06 16.17-13.743 10.425-28.429 25.055-42.167 40.756-19.597 22.397-37.26 47.053-48.41 64.597l49.582 37.188 49.23 12.307 2.288-6.864 17.074 5.692-14.957 44.873 22.42 56.05 22.42-56.05-14.957-44.873 17.074-5.692 2.287 6.864 49.23-12.307 49.583-37.188c-11.15-17.544-28.813-42.2-48.41-64.597-13.738-15.7-28.424-30.33-42.166-40.756C277.318 38.745 264.5 33 256 33zm-91.49 95.213l76 44-9.02 15.574-76-44zm182.98 0l9.02 15.574-76 44-9.02-15.574zM17.21 146.625c31.804 32.973 63.213 73.408 76.3 111.857 1.59-2.708 3.38-5.333 5.292-7.882 5.009-6.68 11.036-12.972 17.14-19.153-8.95-12.884-11.752-29.088-12.605-42.886-29.308-24.142-53.916-37.693-86.127-41.936zm477.582 0c-32.21 4.243-56.819 17.794-86.127 41.936-.853 13.798-3.654 30.002-12.605 42.886 6.104 6.181 12.131 12.474 17.14 19.153 1.912 2.55 3.703 5.174 5.291 7.882 13.088-38.449 44.497-78.884 76.301-111.857zm-373.645 23.484c-.023.045-.054.1-.078.145.137 16.376 2.007 44.095 13.295 55.383l6.364 6.363-6.364 6.363c-8 8-15.74 15.805-21.164 23.037-4.688 6.251-7.327 11.823-7.965 16.452l81.118 30.418c4.7-6.847 9.904-13.253 15.285-18.633l16.029-16.03-.67 22.659c-.25 8.431-.383 16.131-.232 23.41l30.84 11.564L214.707 249h-50.98l-13.364 13.363-12.726-12.726 11.312-11.313-13.531-57.512zm269.708 0l-14.272 10.703-13.531 57.512 11.312 11.313-12.726 12.726L348.273 249h-50.98l-32.897 82.24 30.842-11.566c.15-7.278.018-14.978-.232-23.408l-.672-22.659 16.03 16.03c5.38 5.38 10.584 11.788 15.284 18.634l55.192-20.697 25.926-9.722c-.638-4.63-3.277-10.2-7.965-16.452-5.424-7.232-13.164-15.037-21.164-23.037L371.273 232l6.364-6.363c11.288-11.288 13.158-39.007 13.295-55.383-.024-.045-.055-.1-.078-.145zM157.867 197.65l7.848 33.35H183v-19.975l-10.945-2.736zm196.266 0l-14.188 10.64L329 211.024V231h17.285zM201 215.525V231h19.18l3.287-9.857zm110 0l-22.467 5.618L291.82 231H311zm-205.791 62.51a16.25 16.25 0 0 0-.117 1.256c7.79 37.424 34.985 88.461 66.066 129.256 15.682 20.582 32.34 38.649 47.582 51.271C233.983 472.441 248 479 256 479c8 0 22.017-6.559 37.26-19.182 15.242-12.622 31.9-30.689 47.582-51.271 31.081-40.795 58.277-91.832 66.066-129.256-.02-.41-.063-.83-.117-1.256l-48.027 72.043L256 435.715l-102.764-85.637zm45.756 36.188l15.799 23.699 2.968 2.474c1.753-5.409 4.259-10.906 7.176-16.445zm210.07 0l-25.943 9.728c2.917 5.539 5.423 11.036 7.176 16.445l2.968-2.474zm-162.129 7.73c-1.782 2.76-3.48 5.558-5.006 8.356-4.27 7.83-7.176 15.717-8.328 21.255l19.67 13.114c-4.116-14.232-5.864-28.048-6.336-42.725zm114.188 0c-.472 14.677-2.22 28.493-6.336 42.725l19.67-13.114c-1.152-5.538-4.057-13.425-8.328-21.255-1.527-2.798-3.224-5.596-5.006-8.356zm-19.227 17.457L265 350.236v54.55l7.793-6.495 7.158-14.316c8.04-16.081 12.051-29.95 13.916-44.565zm-75.734.002c1.864 14.614 5.876 28.483 13.916 44.563l7.158 14.316 7.793 6.494v-54.549z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const DragonIcon = (
  <Group scale={{ x: 0.08, y: 0.08 }}>
    <Path
      data="M188.8 20.38c-5.3 26.85 4.6 55.74 34.1 86.52 11.2-7.29 31.6-10.94 50-8.16-46-22.31-66.5-47.13-84.1-78.36zM29.19 26.62C43.56 73.08 81.09 128.8 129.6 168.3 93.51 166 49.93 153.1 18.76 143c24.96 35.2 64.17 52.9 103.34 66.3C97.13 227 66.99 245 18.66 248c54.64 19.2 107.54 8.9 131.34.7-17.9 34.9-100.72 66.2-122.31 77 53.26 4.2 121.71-11 167.01-32.9 10 24.6-1.6 53.2-10.1 77.8-1.9 4.5-3.8 8.9-5.7 13.3 5.1-3.5 10.1-7 14.9-10.6 23.6-16.2 47.8-31.9 59.5-58.8 26.1 31.2 62.7 62.1 107 85.4 17.4 22.1 28.3 49 34.2 73.8 8.3-19.1 13.8-40.2 9.7-60.3 24.5-3.6 35.6-29.7 35.5-54.4-12.6 6.2-15.1 6.3-31.2 8.2 0-10.1.6-12.5-3-28.7-10.3 8.4-21 11.2-30.8 11.8 2.1-7.6 3-19.5 3.7-27.3-13 7.1-19.2 9.7-30.1 10.8-.4-10.9-.1-20-4.1-30.4-29.6 19-48.6 1.5-68-21.3 19.8-17 96.4-21.8 95.1 7.1 14-7.3 18.8-11.2 23.6-15.9 9.1 8.5 13.4 20.9 15.1 31.4 9.3-9.4 10.3-10.5 17.1-23.8 5.7 10.1 8.8 17 10.7 30.6 8.5-6.2 15.4-13.1 19.8-21.4 7.5 15.5 8.3 16 12.4 33 17.8-13.1 21.8-31.2 22.8-47.6 2-33-.3-108.2-31-142.9 1.7 36.3-13.1 70-33.8 80.7-12.6 4.9-96.5-74.6-137.6-93.3-23.5-10.2-48.1 7.1-67.8 9.3C147 106.2 83.57 70.94 29.19 26.62zM296.1 152.8c13.3 20.9 32.2 36.9 60.1 55-19.4 2.9-65.8-6.7-77.7-24-5.5-7.9 7.1-21.3 17.6-31zM180.6 319.1c-14.4 6.2-29.2 10.9-43.8 14.3-2.4 3.6-4.6 7.1-6.7 10.5 14.8 5.3 31.5 7 44.1 2.8 3.3-9.8 5.5-19.3 6.4-27.6zm-68 19.1l-10.2 1.5c-31.81 36.6-61.9 103.2-48.24 151.9h36.13c-11.12-37.7-16.53-87.1 22.31-153.4zm8.5 21.5c-5.9 11.4-10.4 22.1-13.8 32.1 12.9 6.7 29.1 8.9 44.8 8.2 4.6-10.5 9.8-21.8 14.6-33.3-15.4 1.8-31.4-1.4-45.6-7zm111.4 6.6c-12 10.5-25.2 20.3-38.9 29.6 7 34 33.4 63.4 73.9 95.7h83.3c-57.2-31.8-94.6-73.3-118.3-125.3zm-130 43.2c-2.5 11.8-3.3 22.7-3 32.9 37.3 14.2 62.5 13.5 97.5 4.1-7.2-10.3-13-21-16.9-32.3-32.7 9.4-55.4 5.7-77.6-4.7zm106.6 52.4c-38.1 10.9-68.8 13.2-107.5.3 1.8 10.4 4.5 20.1 7.5 29.4h130.1c-11.3-9.8-21.4-19.6-30.1-29.7z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);

export const SkeletonIcon = (
  <Group scale={{ x: 0.08, y: 0.08 }}>
    <Path
      data="M256.836,0h-15.032C140.212,0,58.592,75.416,58.592,168.14v95.772c0,31.388,19.532,59.532,50.78,69.004v60.468
			c0,59.784,108.424,106.612,128.54,106.612h22.816c20.112,0,129.896-46.828,129.896-106.612v-60.468
			c31.248-9.468,50.78-37.62,50.78-69.004V168.14C441.408,75.416,358.428,0,256.836,0z M249.32,269.48
			c17.324,0,26.84,44.172,26.84,58.812c0,14.028-8.052,15.916-15.932,15.916c-1.548,0-3.216-0.064-4.976-0.136
			c-3.744-0.152-8.124-0.152-11.852,0c-1.764,0.076-3.428,0.136-4.984,0.136c-3.748,0-8.016-0.352-11.232-2.972
			c-3.208-2.608-4.7-6.724-4.7-12.944C222.484,313.652,232,269.48,249.32,269.48z M139.608,218.868
			c6.84-8.248,16.6-13.212,27.492-13.948l17.244-1.176c23.04-1.524,41.04,10.32,41.04,26.336c0,15.328-15.408,35.172-35.072,45.176
			l-14.96,7.604c-5.276,2.688-10.58,4.048-15.744,4.048c-14.584,0-25.264-10.6-27.236-27.004l-1.368-11.428
			C129.712,237.64,132.764,227.128,139.608,218.868z M365.32,344.72l-37.196,12.624v21.608c0,0.544-0.444,1.108-0.556,1.624
			c-0.872,18.8-17.732,29.58-45.88,29.58h-65.944c-22.008,0-43.868-10.756-43.868-31.204v-21.608l-37.792-12.624
			c-4.088-1.376-6.396-5.8-5.02-9.892c1.368-4.088,5.756-6.3,9.836-4.916l43.096,14.412c3.184,1.072,5.504,4.052,5.504,7.412v27.224
			c0,4.668,2.812,8.108,7.108,10.564c0.54-3.788,4.172-6.712,8.108-6.712c4.312,0,8.22,3.5,8.22,7.812v3.496
			c0,0.236,3,0.416,4.804,0.416h10.82v-3.916c0-4.312,3.5-7.812,7.812-7.812s7.812,3.5,7.812,7.812v3.916h15.624v-3.916
			c0-4.312,3.5-7.812,7.812-7.812s7.812,3.5,7.812,7.812v3.916h8.252c2.032,0,3.464-0.128,7.372-0.32v-3.592
			c0-4.312,3.152-7.812,7.464-7.812c4.236,0,7.488,3.372,7.616,7.58c4.464-2.328,7.928-5.908,7.928-11.428
			c0-0.48,0.424-0.948,0.424-1.408V351.74c0-3.36,1.752-6.34,4.936-7.412l42.716-14.412c4.096-1.384,8.62,0.828,9.988,4.916
			C371.52,338.916,369.412,343.344,365.32,344.72z M372.428,248.472l-1.368,11.424c-1.964,16.408-12.652,27.008-27.232,27.008
			c-5.168,0-10.464-1.36-15.748-4.048l-14.956-7.604c-19.668-10.004-35.072-29.844-35.072-45.176
			c0-16.016,18.052-27.848,41.036-26.336l17.248,1.176c10.888,0.74,20.648,5.7,27.492,13.952
			C370.676,227.128,373.728,237.64,372.428,248.472z"
      fill="white"
      stroke="grey"
      strokeWidth={1}
      viewBox="0 0 48 48"
    />
  </Group>
);


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/map-module/utils/index.ts
───────────────────────────────────────────────
export function generateRandomItems(items, limit, positionFunc) {
  const shuffledItems = items.sort(() => 0.5 - Math.random());
  const selectedItems = shuffledItems.slice(0, limit);

  return selectedItems.map((item, i) => ({
    id: i.toString(),
    className: item,
    isDragging: false,
    ...positionFunc(item, i),
  }));
}

export function generateParty() {
  const classes = ['fighter', 'barbarian', 'wizard'];

  const positionFunc = () => {
    const gap = 100;
    const startingX = window.innerWidth / 2 - (classes.length * gap) / 2;

    return (className, i) => ({
      x: startingX + i * gap,
      y: window.innerHeight / 2,
    });
  };

  return generateRandomItems(classes, 3, positionFunc());
}

export function generateMonsters() {
  const monsters = ['goblin', 'skeleton', 'dragon'];

  const positionFunc = () => {
    const mapWidth = window.innerWidth;
    const mapHeight = window.innerHeight;
    const centerX = mapWidth / 2;
    const centerY = mapHeight / 2;
    const exclusionRadius = 200;

    function isOutsideExclusionZone(x, y) {
      const distance = Math.sqrt(
        Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)
      );
      return distance > exclusionRadius;
    }

    return (monsterName, i) => {
      let monsterX, monsterY;

      do {
        monsterX =
          Math.floor(Math.random() * (mapWidth * 0.8 - mapWidth * 0.2)) +
          mapWidth * 0.2;
        monsterY =
          Math.floor(Math.random() * (mapHeight * 0.8 - mapHeight * 0.2)) +
          mapHeight * 0.2;
      } while (!isOutsideExclusionZone(monsterX, monsterY));

      return { x: monsterX, y: monsterY };
    };
  };

  return generateRandomItems(monsters, 3, positionFunc());
}

export function generateStructures() {
  const structures = ['obelisk', 'tower', 'house'];

  const positionFunc = () => {
    const mapWidth = window.innerWidth;
    const mapHeight = window.innerHeight;
    const centerX = mapWidth / 2;
    const centerY = mapHeight / 2;
    const exclusionRadius = 200;

    function isOutsideExclusionZone(x, y) {
      const distance = Math.sqrt(
        Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)
      );
      return distance > exclusionRadius;
    }

    return (structureName, i) => {
      let structureX, structureY;

      do {
        structureX =
          Math.floor(Math.random() * (mapWidth * 0.8 - mapWidth * 0.2)) +
          mapWidth * 0.2;
        structureY =
          Math.floor(Math.random() * (mapHeight * 0.8 - mapHeight * 0.2)) +
          mapHeight * 0.2;
      } while (!isOutsideExclusionZone(structureX, structureY));

      return { x: structureX, y: structureY };
    };
  };

  return generateRandomItems(structures, 3, positionFunc());
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/types/commonTypes.ts
───────────────────────────────────────────────
export interface Position {
  x: number;
  y: number;
}

export interface DraggableElement {
  id: string;
  x: number;
  y: number;
  className: string;
  isDragging: boolean;
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/types/index.ts
───────────────────────────────────────────────
export type Coordinate = {
  x: number;
  y: number;
};

export type IconData = {
  id: string;
  x: number;
  y: number;
  className: string;
  isDragging: boolean;
};

export type StageSize = {
  width: number;
  height: number;
};

export type IconProps = {
  id: string;
  name: string;
  x: number;
  y: number;
  className: string;
  draggable: boolean;
  dragBoundFunc: (pos: Coordinate) => Coordinate;
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/types/monsterTypes.ts
───────────────────────────────────────────────
import { DraggableElement } from './commonTypes';

export type Player = DraggableElement


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/types/playerTypes.ts
───────────────────────────────────────────────
import { DraggableElement } from './commonTypes';

export type Player = DraggableElement


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/types/structureTypes.ts
───────────────────────────────────────────────
import { DraggableElement } from './commonTypes';

export type Structure = DraggableElement


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/dnd-interactive-map/zoom-in/character-popover.tsx
───────────────────────────────────────────────
import Modal from 'react-modal';
import Image from 'next/image';
import { Button, Heading } from '@with-nx/generic-ui';
const customStyles = {
  content: {
    width: '500px',
    height: '400px',
  },
};

const CharacterPopover = ({ item, onClose }) => {
  return (
    <Modal
      isOpen={!!item}
      onRequestClose={onClose}
      contentLabel="Item Details"
      style={customStyles}
    >
      <Heading level={2} text={`${item?.type} Details`} />
      {item && (
        <div>
          <Image height={300} width={300} src={item.src} alt={item.type} />
          <p>
            Position: ({item.x}, {item.y})
          </p>
        </div>
      )}
      <Button theme="secondary" onClick={onClose} text="Close" />
    </Modal>
  );
};

export default CharacterPopover;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/find-freelance-sites/pagespeed-insights.tsx
───────────────────────────────────────────────
//components/projects/find-freelance-sites/pagespeed-insights.tsx

import useSWR from 'swr';
import axios from 'axios';
import { useState } from 'react';
import { Input, Button } from '@with-nx/react-ui';
import { Flex } from '@with-nx/generic-ui';

const fetcher = (url: string) => axios.get(url).then((res) => res.data);

const PagespeedInsights = () => {
  const [url, setUrl] = useState('');
  const [requestUrl, setRequestUrl] = useState('');

  const { data, error } = useSWR(
    requestUrl ? `/api/pagespeed?url=${requestUrl}` : null,
    fetcher
  );

  const onSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setRequestUrl(url);
  };

  console.log(`data`, data);

  return (
    <div>
      <form onSubmit={onSubmit} className="p-4">
        <Flex className="items-center space-x-4">
          <Input
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter website URL"
            className="h-full"
            required
          />
          <Button className="btn-primary w-36" type="submit">
            Submit
          </Button>
        </Flex>
      </form>

      {error && <div>Failed to load data</div>}
      {!data && requestUrl && <div className="p-4">Loading...</div>}
      {data && (
        <Flex className="flex-col p-4">
          <Flex className="justify-between">
            <span>Performance Score</span>
            <span>{data.lighthouseResult.categories.performance.score}</span>
          </Flex>
          <Flex className="justify-between">
            <span>First Contentful Paint</span>
            <span>
              {
                data.lighthouseResult.audits['first-contentful-paint']
                  .displayValue
              }
            </span>
          </Flex>
          <Flex className="justify-between">
            <span>Speed Index</span>
            <span>
              {data.lighthouseResult.audits['speed-index'].displayValue}
            </span>
          </Flex>
          <Flex className="justify-between">
            <span>Time to Interactive</span>
            <span>{data.lighthouseResult.audits.interactive.displayValue}</span>
          </Flex>
          <Flex className="justify-between">
            <span>First Meaningful Paint</span>
            <span>
              {
                data.lighthouseResult.audits['first-meaningful-paint']
                  .displayValue
              }
            </span>
          </Flex>
          <Flex className="justify-between">
            <span>Largest Contentful Paint</span>
            <span>
              {
                data.lighthouseResult.audits['largest-contentful-paint']
                  .displayValue
              }
            </span>
          </Flex>
          <Flex className="justify-between">
            <span>Cumulative Layout Shift</span>
            <span>
              {
                data.lighthouseResult.audits['cumulative-layout-shift']
                  .displayValue
              }
            </span>
          </Flex>
          <Flex className="justify-between">
            <span>Total Blocking Time</span>
            <span>
              {data.lighthouseResult.audits['total-blocking-time'].displayValue}
            </span>
          </Flex>
          <Flex className="justify-between">
            <span>SEO Score</span>
            <span>
              {data.lighthouseResult.categories.seo ? (
                <Flex className="justify-between">
                  <span>{data.lighthouseResult.categories.seo.score}</span>
                </Flex>
              ) : (
                <Flex className="justify-between">
                  <span>N/A</span>
                </Flex>
              )}
            </span>
          </Flex>
        </Flex>
      )}
    </div>
  );
};

export default PagespeedInsights;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/find-freelance-sites/version-one.tsx
───────────────────────────────────────────────
import { useState } from 'react';
import axios from 'axios';
import useSWR from 'swr';
import { Button, Checkbox, Flex, Input, Text } from '@with-nx/react-ui';
import { FiX } from 'react-icons/fi';
import { useSearchQuery, useFileTypeSelection } from '@with-nx/react-hooks';

const fetcher = (url) => axios.get(url).then((res) => res.data);

const VersionOne = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [years, setYears] = useState(10);
  const [excludeTerms, setExcludeTerms] = useState(['']);
  const [excludeTerm, setExcludeTerm] = useState('');

  const handleExcludeTermChange = (e) => {
    setExcludeTerm(e.target.value);
  };

  const handleAddExcludeTerm = (e) => {
    e.preventDefault();
    if (excludeTerm !== '') {
      setExcludeTerms([...excludeTerms, excludeTerm]);
      setExcludeTerm('');
    }
  };

  const handleRemoveExcludeTerm = (index) => {
    setExcludeTerms(excludeTerms.filter((_, i) => i !== index));
  };

  //file types
  const { selectedFileType, handleFileTypeChange } = useFileTypeSelection();
  const { handleSearch: triggerSearch, url } = useSearchQuery(
    'https://www.googleapis.com/customsearch/v1',
    {
      key: process.env.NEXT_PUBLIC_FREE_GOOGLE_SEARCH_API_KEY,
      cx: process.env.NEXT_PUBLIC_CUSTOM_SEARCH_ENGINE_ID,
      excludeTerms: excludeTerms,
    }
  );

  const handleFormSubmit = (e, searchTerm, years) => {
    if (e.preventDefault) {
      e.preventDefault();
    }
    // Convert excludeTerms array into a string with - operator before each term
    const excluded = excludeTerms.reduce((acc, term) => `${acc} -${term}`, '');
    const fileTypeQuery = selectedFileType
      ? ` filetype:${selectedFileType}`
      : '';

    // Include the excluded terms and file types in the search term
    triggerSearch(`${searchTerm}${excluded}${fileTypeQuery}`, years);
  };

  const { data } = useSWR(url, fetcher);
  return (
    <>
      <form
        onSubmit={(e) => handleFormSubmit(e, searchTerm, years)}
        className="space-y-4 p-4"
      >
        <Flex className="items-center space-x-6">
          <Input
            type="text"
            name="searchTerm"
            label="Search Term"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Search"
          />
          <Button className="btn-primary mt-6" type="submit">
            Submit
          </Button>
        </Flex>
        <Flex className="w-full flex-col space-y-2 md:flex-row">
          <Flex className="w-full items-center space-x-6 space-y-2 md:mr-8 md:w-auto">
            <Input
              type="number"
              label="Age of Website (Years)"
              name="years"
              className="mb-8 h-14 !w-48"
              value={years}
              onChange={(e) => setYears(parseInt(e.target.value))}
              placeholder="Years"
            />
          </Flex>
          <Flex className="w-full flex-col space-y-2 md:w-auto ">
            <Text className="block">Page File Type (old formats)</Text>
            <Flex className="space-x-2">
              {['html', 'php', 'asp'].map((fileType) => (
                <Checkbox
                  key={fileType}
                  name={fileType}
                  label={fileType.toUpperCase()}
                  checked={selectedFileType === fileType}
                  onChange={handleFileTypeChange}
                />
              ))}
            </Flex>
          </Flex>
        </Flex>
        <Flex className="mt-8 flex-col space-y-2">
          <Flex className="w-full items-center justify-between space-x-2">
            <Text className="!w-auto">Excluded Terms</Text>
            <Flex className="grow space-x-1">
              {excludeTerms.map(
                (term, index) =>
                  term !== '' && (
                    <Flex key={index} className="items-center space-x-2">
                      <Button
                        className="btn-secondary flex items-center"
                        onClick={() => handleRemoveExcludeTerm(index)}
                      >
                        {term}
                        <FiX className="ml-2 h-4 w-4" />
                      </Button>
                    </Flex>
                  )
              )}
            </Flex>
          </Flex>
          <Flex className="items-center space-x-2">
            <Input
              type="text"
              value={excludeTerm}
              onChange={handleExcludeTermChange}
              placeholder="Enter term to exclude"
            />
            <Button className="btn-primary" onClick={handleAddExcludeTerm}>
              Add
            </Button>
          </Flex>
        </Flex>
      </form>
      <>
        {url && !data ? (
          <div>Loading...</div>
        ) : (
          <Flex className="flex-col space-y-0 p-6">
            {data &&
              data.items.map((item, index) => (
                <div key={index}>
                  <a target="_blank" href={item.link}>
                    {item.link}
                  </a>
                  {/* <p>{item.snippet}</p> */}
                </div>
              ))}
          </Flex>
        )}
      </>
    </>
  );
};

export default VersionOne;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/find-freelance-sites/version-two.tsx
───────────────────────────────────────────────
import { useState } from 'react';
import axios from 'axios';
import useSWR from 'swr';
import { Button, Flex, Input, Text } from '@with-nx/react-ui';

const fetcher = async (urls) => {
  const results = await Promise.all(
    urls.map((url) => axios.get(url).then((res) => res.data))
  );
  return results.flatMap((result) => result.items || []);
};

const VersionTwo = () => {
  const [googleSearchTerm, setGoogleSearchTerm] = useState('');
  const [excludedTerms, setExcludedTerms] = useState('');
  const [googleUrls, setGoogleUrls] = useState([]);

  const handleGoogleSearch = (e) => {
    e.preventDefault();
    if (googleSearchTerm !== '') {
      const excluded = excludedTerms
        .split(',')
        .map((term) => '-' + term.trim())
        .join(' ');
      setGoogleUrls(
        Array.from(
          { length: 10 },
          (_, i) =>
            `https://www.googleapis.com/customsearch/v1?key=${
              process.env.NEXT_PUBLIC_PAID_GOOGLE_SEARCH_API_KEY
            }&cx=${
              process.env.NEXT_PUBLIC_CUSTOM_SEARCH_ENGINE_ID
            }&q=${googleSearchTerm} ${excluded}&start=${i * 10 + 1}`
        )
      );
    }
  };

  const { data: VersionTwoData, error: VersionTwoError } = useSWR(
    googleUrls.length ? googleUrls : null,
    fetcher
  );

  if (VersionTwoError) {
    if (VersionTwoError.response && VersionTwoError.response.status === 429) {
      console.error('You have reached the maximum number of queries');
    } else {
      console.error(VersionTwoError);
    }
  }

  return (
    <form onSubmit={handleGoogleSearch} className="p-4">
      <Flex className="items-center space-x-6">
        <Input
          type="text"
          name="googleSearchTerm"
          label="Search Term"
          value={googleSearchTerm}
          onChange={(e) => setGoogleSearchTerm(e.target.value)}
          placeholder="Search"
        />
        <Input
          type="text"
          name="excludedTerms"
          label="Exclude Terms"
          value={excludedTerms}
          onChange={(e) => setExcludedTerms(e.target.value)}
          placeholder="Enter terms separated by commas"
        />
        <Button className="btn-primary mt-6" type="submit">
          Submit
        </Button>
      </Flex>
      {VersionTwoError && (
        <div>
          An error occurred:
          {VersionTwoError.response && VersionTwoError.response.status === 429
            ? 'You have reached the maximum number of queries'
            : VersionTwoError.message}
        </div>
      )}
      <>
        {!VersionTwoData ? (
          <div>Loading...</div>
        ) : (
          <Flex className="flex-col space-y-0 p-2">
            <Text className="text-xl font-bold">
              Results: {VersionTwoData && VersionTwoData.length}
            </Text>
            {VersionTwoData &&
              VersionTwoData.length > 0 &&
              VersionTwoData.map((item, index) => (
                <div key={`item-${index}`}>
                  <a target="_blank">{item.link}</a>
                </div>
              ))}
          </Flex>
        )}
      </>
    </form>
  );
};

export default VersionTwo;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/konva-map-generic/DNDMap.tsx
───────────────────────────────────────────────
// DNDMap.tsx
import React, { useState, useEffect } from 'react';
import { Stage, Layer, Line } from 'react-konva';
import type { KonvaEventObject } from 'konva/lib/Node';

import useMockDNDData from './useMockDNDData'; // Use the mock hook
import ShapeRenderer from './shape-renderer';

const DNDMap: React.FC = () => {
  const data = useMockDNDData();
  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });
  const [isClient, setIsClient] = useState(false);
  const cellSize = 80; // Define the cell size

  useEffect(() => {
    setIsClient(true); // Set to true after the component mounts
    const handleResize = () => {
      setDimensions({ width: window.innerWidth, height: window.innerHeight });
    };

    if (typeof window !== 'undefined') {
      handleResize(); // Set initial dimensions
      window.addEventListener('resize', handleResize);
    }

    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('resize', handleResize);
      }
    };
  }, []);

  const handleDragEnd = (e: KonvaEventObject<DragEvent>, id: number) => {
    const x = e.target.x();
    const y = e.target.y();

    // Update the position of the token
    e.target.position({ x, y });

    // If you want to update the state or the backend, do it here
    // Example: updateTokenPosition(id, x, y);
  };

  if (!isClient) {
    return null; // Render nothing on the server
  }

  return (
    <Stage width={dimensions.width} height={dimensions.height}>
      <Layer>
        {/* Background grid */}
        {[...Array(Math.ceil(dimensions.width / cellSize))].map((_, i) => (
          <Line
            key={`v${i}`}
            points={[i * cellSize, 0, i * cellSize, dimensions.height]}
            stroke="#ddd"
            strokeWidth={0.25}
          />
        ))}
        {[...Array(Math.ceil(dimensions.height / cellSize))].map((_, i) => (
          <Line
            key={`h${i}`}
            points={[0, i * cellSize, dimensions.width, i * cellSize]}
            stroke="#ddd"
            strokeWidth={0.25}
          />
        ))}
      </Layer>
      <Layer>
        {/* Display tokens */}
        {data.map((token) => (
          <ShapeRenderer
            key={token.id}
            token={token}
            handleDragEnd={handleDragEnd}
          />
        ))}
      </Layer>
    </Stage>
  );
};

export default DNDMap;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/konva-map-generic/shape-renderer.tsx
───────────────────────────────────────────────
// ShapeRenderer.tsx
import React from 'react';
import { Circle, Rect } from 'react-konva';
import type { KonvaEventObject } from 'konva/lib/Node'; // 👈 correct import
import { Token } from './useMockDNDData';

interface ShapeRendererProps {
  token: Token;
  handleDragEnd: (e: KonvaEventObject<DragEvent>, id: number) => void; // ✅ typed
}

const ShapeRenderer: React.FC<ShapeRendererProps> = ({
  token,
  handleDragEnd,
}) => {
  if (token.shape === 'circle') {
    return (
      <Circle
        x={token.x}
        y={token.y}
        radius={20}
        fill={token.color}
        draggable
        onDragEnd={(e) => handleDragEnd(e, token.id)}
      />
    );
  }

  if (token.shape === 'rectangle') {
    return (
      <Rect
        x={token.x}
        y={token.y}
        width={40}
        height={40}
        fill={token.color}
        draggable
        onDragEnd={(e) => handleDragEnd(e, token.id)}
      />
    );
  }

  return null;
};

export default ShapeRenderer;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/projects/konva-map-generic/useMockDNDData.ts
───────────────────────────────────────────────
// useMockDNDData.ts
import { useState, useEffect } from 'react';

export interface Token {
  id: number;
  x: number;
  y: number;
  color: string;
  shape: 'circle' | 'rectangle';
}

// Mock data
const mockData: Token[] = [
  { id: 1, x: 120, y: 160, color: 'red', shape: 'circle' },
  { id: 2, x: 240, y: 280, color: 'blue', shape: 'rectangle' },
  { id: 3, x: 360, y: 400, color: 'green', shape: 'circle' },
  { id: 4, x: 440, y: 480, color: 'purple', shape: 'rectangle' },
];

const useMockDNDData = (): Token[] => {
  const [data, setData] = useState<Token[]>([]);

  useEffect(() => {
    // Simulate a data fetch
    setTimeout(() => {
      setData(mockData);
    }, 1000); // Mock delay
  }, []);

  return data;
};

export default useMockDNDData;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/Sparkles.tsx
───────────────────────────────────────────────
'use client';
import React, { useId } from 'react';
import { useEffect, useState } from 'react';
import Particles, { initParticlesEngine } from '@tsparticles/react';
import type { Container, SingleOrMultiple } from '@tsparticles/engine';
import { loadSlim } from '@tsparticles/slim';
import { cn } from '@with-nx/utils';
import { motion, useAnimation } from 'framer-motion';

type ParticlesProps = {
  id?: string;
  className?: string;
  background?: string;
  particleSize?: number;
  minSize?: number;
  maxSize?: number;
  speed?: number;
  particleColor?: string;
  particleDensity?: number;
};
export const SparklesCore = (props: ParticlesProps) => {
  const {
    id,
    className,
    background,
    minSize,
    maxSize,
    speed,
    particleColor,
    particleDensity,
  } = props;
  const [init, setInit] = useState(false);
  useEffect(() => {
    initParticlesEngine(async (engine) => {
      await loadSlim(engine);
    }).then(() => {
      setInit(true);
    });
  }, []);
  const controls = useAnimation();

  const particlesLoaded = async (container?: Container) => {
    if (container) {
      controls.start({
        opacity: 1,
        transition: {
          duration: 1,
        },
      });
    }
  };

  const generatedId = useId();
  return (
    <motion.div animate={controls} className={cn('opacity-0', className)}>
      {init && (
        <Particles
          id={id || generatedId}
          className={cn('h-full w-full')}
          particlesLoaded={particlesLoaded}
          options={{
            background: {
              color: {
                value: background || '#0d47a1',
              },
            },
            fullScreen: {
              enable: false,
              zIndex: 1,
            },

            fpsLimit: 120,
            interactivity: {
              events: {
                onClick: {
                  enable: true,
                  mode: 'push',
                },
                onHover: {
                  enable: false,
                  mode: 'repulse',
                },
                resize: {
                  enable: true,
                },
              },
              modes: {
                push: {
                  quantity: 4,
                },
                repulse: {
                  distance: 200,
                  duration: 0.4,
                },
              },
            },

            particles: {
              bounce: {
                horizontal: {
                  value: 1,
                },
                vertical: {
                  value: 1,
                },
              },
              collisions: {
                absorb: {
                  speed: 2,
                },
                bounce: {
                  horizontal: {
                    value: 1,
                  },
                  vertical: {
                    value: 1,
                  },
                },
                enable: false,
                maxSpeed: 50,
                mode: 'bounce',
                overlap: {
                  enable: true,
                  retries: 0,
                },
              },
              color: {
                value: particleColor || '#ffffff',
                animation: {
                  h: {
                    count: 0,
                    enable: false,
                    speed: 1,
                    decay: 0,
                    delay: 0,
                    sync: true,
                    offset: 0,
                  },
                  s: {
                    count: 0,
                    enable: false,
                    speed: 1,
                    decay: 0,
                    delay: 0,
                    sync: true,
                    offset: 0,
                  },
                  l: {
                    count: 0,
                    enable: false,
                    speed: 1,
                    decay: 0,
                    delay: 0,
                    sync: true,
                    offset: 0,
                  },
                },
              },
              effect: {
                close: true,
                fill: true,
                options: {},
                type: {} as SingleOrMultiple<string> | undefined,
              },
              groups: {},
              move: {
                angle: {
                  offset: 0,
                  value: 90,
                },
                attract: {
                  distance: 200,
                  enable: false,
                  rotate: {
                    x: 3000,
                    y: 3000,
                  },
                },
                center: {
                  x: 50,
                  y: 50,
                  mode: 'percent',
                  radius: 0,
                },
                decay: 0,
                distance: {},
                direction: 'none',
                drift: 0,
                enable: true,
                gravity: {
                  acceleration: 9.81,
                  enable: false,
                  inverse: false,
                  maxSpeed: 50,
                },
                path: {
                  clamp: true,
                  delay: {
                    value: 0,
                  },
                  enable: false,
                  options: {},
                },
                outModes: {
                  default: 'out',
                },
                random: false,
                size: false,
                speed: {
                  min: 0.1,
                  max: 1,
                },
                spin: {
                  acceleration: 0,
                  enable: false,
                },
                straight: false,
                trail: {
                  enable: false,
                  length: 10,
                  fill: {},
                },
                vibrate: false,
                warp: false,
              },
              number: {
                density: {
                  enable: true,
                  width: 400,
                  height: 400,
                },
                limit: {
                  mode: 'delete',
                  value: 0,
                },
                value: particleDensity || 120,
              },
              opacity: {
                value: {
                  min: 0.1,
                  max: 1,
                },
                animation: {
                  count: 0,
                  enable: true,
                  speed: speed || 4,
                  decay: 0,
                  delay: 0,
                  sync: false,
                  mode: 'auto',
                  startValue: 'random',
                  destroy: 'none',
                },
              },
              reduceDuplicates: false,
              shadow: {
                blur: 0,
                color: {
                  value: '#000',
                },
                enable: false,
                offset: {
                  x: 0,
                  y: 0,
                },
              },
              shape: {
                close: true,
                fill: true,
                options: {},
                type: 'circle',
              },
              size: {
                value: {
                  min: minSize || 1,
                  max: maxSize || 3,
                },
                animation: {
                  count: 0,
                  enable: false,
                  speed: 5,
                  decay: 0,
                  delay: 0,
                  sync: false,
                  mode: 'auto',
                  startValue: 'random',
                  destroy: 'none',
                },
              },
              stroke: {
                width: 0,
              },
              zIndex: {
                value: 0,
                opacityRate: 1,
                sizeRate: 1,
                velocityRate: 1,
              },
              destroy: {
                bounds: {},
                mode: 'none',
                split: {
                  count: 1,
                  factor: {
                    value: 3,
                  },
                  rate: {
                    value: {
                      min: 4,
                      max: 9,
                    },
                  },
                  sizeOffset: true,
                },
              },
              roll: {
                darken: {
                  enable: false,
                  value: 0,
                },
                enable: false,
                enlighten: {
                  enable: false,
                  value: 0,
                },
                mode: 'vertical',
                speed: 25,
              },
              tilt: {
                value: 0,
                animation: {
                  enable: false,
                  speed: 0,
                  decay: 0,
                  sync: false,
                },
                direction: 'clockwise',
                enable: false,
              },
              twinkle: {
                lines: {
                  enable: false,
                  frequency: 0.05,
                  opacity: 1,
                },
                particles: {
                  enable: false,
                  frequency: 0.05,
                  opacity: 1,
                },
              },
              wobble: {
                distance: 5,
                enable: false,
                speed: {
                  angle: 50,
                  move: 10,
                },
              },
              life: {
                count: 0,
                delay: {
                  value: 0,
                  sync: false,
                },
                duration: {
                  value: 0,
                  sync: false,
                },
              },
              rotate: {
                value: 0,
                animation: {
                  enable: false,
                  speed: 0,
                  decay: 0,
                  sync: false,
                },
                direction: 'clockwise',
                path: false,
              },
              orbit: {
                animation: {
                  count: 0,
                  enable: false,
                  speed: 1,
                  decay: 0,
                  delay: 0,
                  sync: false,
                },
                enable: false,
                opacity: 1,
                rotation: {
                  value: 45,
                },
                width: 1,
              },
              links: {
                blink: false,
                color: {
                  value: '#fff',
                },
                consent: false,
                distance: 100,
                enable: false,
                frequency: 1,
                opacity: 1,
                shadow: {
                  blur: 5,
                  color: {
                    value: '#000',
                  },
                  enable: false,
                },
                triangles: {
                  enable: false,
                  frequency: 1,
                },
                width: 1,
                warp: false,
              },
              repulse: {
                value: 0,
                enabled: false,
                distance: 1,
                duration: 1,
                factor: 1,
                speed: 1,
              },
            },
            detectRetina: true,
          }}
        />
      )}
    </motion.div>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/components/TracingBeam.tsx
───────────────────────────────────────────────
'use client';
import React, { useEffect, useRef, useState } from 'react';
import { motion, useTransform, useScroll, useSpring } from 'framer-motion';
import { cn } from '@with-nx/utils';

export const TracingBeam = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  const ref = useRef<HTMLDivElement>(null);
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ['start start', 'end start'],
  });

  const contentRef = useRef<HTMLDivElement>(null);
  const [svgHeight, setSvgHeight] = useState(0);

  useEffect(() => {
    if (contentRef.current) {
      setSvgHeight(contentRef.current.offsetHeight);
    }
  }, []);

  const y1 = useSpring(
    useTransform(scrollYProgress, [0, 0.8], [50, svgHeight]),
    {
      stiffness: 500,
      damping: 90,
    }
  );
  const y2 = useSpring(
    useTransform(scrollYProgress, [0, 1], [50, svgHeight - 200]),
    {
      stiffness: 500,
      damping: 90,
    }
  );

  return (
    <motion.div
      ref={ref}
      className={cn('relative w-full max-w-4xl mx-auto h-full', className)}
    >
      <div className="absolute -left-4 top-3 md:-left-20">
        <motion.div
          transition={{
            duration: 0.2,
            delay: 0.5,
          }}
          animate={{
            boxShadow:
              scrollYProgress.get() > 0
                ? 'none'
                : 'rgba(0, 0, 0, 0.24) 0px 3px 8px',
          }}
          className="border-netural-200 ml-[27px] flex h-4 w-4 items-center justify-center rounded-full border shadow-sm"
        >
          <motion.div
            transition={{
              duration: 0.2,
              delay: 0.5,
            }}
            animate={{
              backgroundColor:
                scrollYProgress.get() > 0 ? 'white' : 'var(--emerald-500)',
              borderColor:
                scrollYProgress.get() > 0 ? 'white' : 'var(--emerald-600)',
            }}
            className="h-2 w-2  rounded-full border border-neutral-300 bg-white"
          />
        </motion.div>
        <svg
          viewBox={`0 0 20 ${svgHeight}`}
          width="20"
          height={svgHeight} // Set the SVG height
          className=" ml-4 block"
          aria-hidden="true"
        >
          <motion.path
            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}
            fill="none"
            stroke="#9091A0"
            strokeOpacity="0.16"
            transition={{
              duration: 10,
            }}
          ></motion.path>
          <motion.path
            d={`M 1 0V -36 l 18 24 V ${svgHeight * 0.8} l -18 24V ${svgHeight}`}
            fill="none"
            stroke="url(#gradient)"
            strokeWidth="1.25"
            className="motion-reduce:hidden"
            transition={{
              duration: 10,
            }}
          ></motion.path>
          <defs>
            <motion.linearGradient
              id="gradient"
              gradientUnits="userSpaceOnUse"
              x1="0"
              x2="0"
              y1={y1} // set y1 for gradient
              y2={y2} // set y2 for gradient
            >
              <stop stopColor="#18CCFC" stopOpacity="0"></stop>
              <stop stopColor="#18CCFC"></stop>
              <stop offset="0.325" stopColor="#6344F5"></stop>
              <stop offset="1" stopColor="#AE48FF" stopOpacity="0"></stop>
            </motion.linearGradient>
          </defs>
        </svg>
      </div>
      <div ref={contentRef}>{children}</div>
    </motion.div>
  );
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/data/projects.ts
───────────────────────────────────────────────
import type { StaticImageData } from 'next/image';

type Resources = string[];

type Entry = {
  title: string;
  subtitle: string;
  description: string;
  image: string | StaticImageData;
};

export type Project = {
  slug: string;
  title: string;
  mobileTitle: string;
  image: string | StaticImageData;
  description: string;
  process: Entry;
  management: Entry;
  media: Entry;
  technologyReason: Entry;
  purpose: Entry;
  resources?: Resources;
  link: string;
  github: string;
  category: string[];
  isUnderConstruction: boolean;
};

export const projectsData: Project[] = [
  {
    slug: 'play-2-win-ff',
    title: 'p2w Draft Tool',
    mobileTitle: 'p2w Draft Tool',
    image: 'https://app-assets.vercel.app/apps/play2winff/p2w_hero.jpg',
    description:
      'Crafted for Yahoo fantasy football leagues, this tool is indispensable for tracking NFL updates.',
    process: {
      title: 'Development Approach',
      subtitle: 'Leveraging Expert Knowledge',
      description:
        'Utilizing a combination of React, Typescript, and the power of the NX environment, the Play2WinFF Draft Tool was systematically designed to deliver high performance. Merging the insights of seasoned fantasy football experts with cutting-edge coding techniques ensured a top-notch user experience.',
      image: '',
    },
    management: {
      title: 'Seamless Data Integration',
      subtitle: 'Real-time Fantasy Football Data',
      description:
        "By integrating data from Yahoo's fantasy football league in real-time, the tool ensures users have up-to-the-minute updates. Furthermore, it combines this with custom opinions and rankings, leading to a comprehensive view of the player landscape.",
      image: '',
    },
    media: {
      title: 'Engaging User Interface',
      subtitle: 'Visually Pleasing and Intuitive Design',
      description:
        'With an eye-catching design powered by TailwindCSS, the user interface was crafted to be not just aesthetically pleasing, but also user-friendly. The vivid imagery and intuitive design elements guide users effortlessly through the drafting process.',
      image: 'https://app-assets.vercel.app/apps/play2winff/p2w_hero.jpg',
    },
    technologyReason: {
      title: 'Choice of Tech Stack',
      subtitle: 'Best-in-class Technologies for Optimal Performance',
      description:
        'The decision to utilize technologies like React, Typescript, and NX in a monorepo environment was driven by the need for performance, scalability, and maintainability. It ensures that the Play2WinFF Draft Tool remains responsive and adaptable to future expansions.',
      image: '',
    },
    purpose: {
      title: 'Bridging the Gap',
      subtitle: 'Overcoming Limitations in Existing Tools',
      description:
        'While Yahoo provides a baseline for tracking fantasy football, its inherent limitations and single-source dependency prompted the creation of the Play2WinFF Draft Tool. This platform introduces custom rankings, opinions from various experts, and a sprinkle of personal insights to offer a more comprehensive and personalized drafting experience.',
      image: '',
    },
    resources: ['#1', '#2', '#3'],
    link: 'https://play2winff-nx.vercel.app/',
    github: '',
    category: ['React', 'Typescript', 'TailwindCSS', 'NX', 'Next', 'API'],
    isUnderConstruction: false,
  },
  {
    slug: 'react-ui-library',
    title: 'React UI Library',
    mobileTitle: 'React UI Library',
    image:
      'https://app-assets.vercel.app/apps/devblog/dev_blog_react-ui-library.jpg',
    description:
      'A comprehensive UI library tailored for React, constructed with precision, adaptability, and efficiency in mind.',
    process: {
      title: 'Adhering to Atomic Design',
      subtitle: 'Modular Component Architecture',
      description:
        'The React UI Library follows the atomic design pattern, promoting modularity, reusability, and maintainability. It divides components into atoms, molecules, organisms, templates, and pages, streamlining the development process while ensuring consistency.',
      image: '',
    },
    management: {
      title: 'Blend of CSS Modules and TailwindCSS',
      subtitle: 'Tailored Styling Approach',
      description:
        'Depending on specific requirements, the library utilizes CSS modules or TailwindCSS. This dynamic approach ensures components retain their styling integrity, while also benefiting from the utility-first prowess of TailwindCSS.',
      image: '',
    },
    media: {
      title: 'Visual Component Catalog',
      subtitle: 'Documented with Storybook',
      description:
        'Every component is meticulously documented in Storybook, offering preset examples, edge cases, and interactivity. This not only enhances developer experience but also acts as a comprehensive reference for users, ensuring optimal utilization of each component.',
      image: '',
    },
    technologyReason: {
      title: 'Driven by Best Practices',
      subtitle: 'React, Jest, and More',
      description:
        "The choice to leverage React, TypeScript, Jest, and other modern technologies is rooted in the library's commitment to quality. Jest ensures each component's robustness through rigorous testing, while React and TypeScript offer the foundation for scalable and type-safe components.",
      image: '',
    },
    purpose: {
      title: 'Bridging Inconsistencies',
      subtitle: 'Taking Control of UI Components',
      description:
        'Driven by a vision to have more control and achieve consistency, this React UI Library was birthed. It sidesteps the inconsistencies of third-party libraries, offering a reliable set of components, each designed with care and precision in a controlled NX monorepo environment.',
      image: '',
    },
    resources: ['#1', '#2', '#3'],
    link: 'https://roberthogan-dev-react-ui.vercel.app/',
    github: '', // You can provide the github link here if available.
    category: ['React', 'Typescript', 'CSS', 'Storybook', 'Jest', 'NX'],
    isUnderConstruction: true,
  },
  {
    slug: 'memory-game',
    title: 'Concentration',
    mobileTitle: 'Game of Memory',
    image:
      'https://app-assets.vercel.app/apps/devblog/dev_blog-concentration.jpg',
    description:
      'Delve into a nostalgic journey with "Concentration", an emblem of my foundational foray into web dev.',
    process: {
      title: 'Building from Scratch',
      subtitle: 'My Web Development Onset',
      description:
        'One of my earliest projects, this Memory Game became a playground for exploring the nuances of HTML, CSS, and JavaScript. It encapsulated challenges, revelations, and iterative learning – laying the groundwork for my web development journey.',
      image: '',
    },
    management: {
      title: 'Managing Assets',
      subtitle: 'Curating a Visual Treat',
      description:
        "The game isn't just about logic; it's about visual engagement. By carefully curating assets that resonate with the essence of the classic game, the user experience was both nostalgic and immersive.",
      image: '',
    },
    media: {
      title: 'Classic Game Design',
      subtitle: 'Rekindling Nostalgia',
      description:
        'Drawing from the classic "Game of Concentration", the design evokes a sense of nostalgia while being functional. The clean interface ensures users can focus on the game, while the curated assets add a touch of charm.',
      image: '',
    },
    technologyReason: {
      title: 'Choosing Vanilla',
      subtitle: 'Back to the Basics',
      description:
        'Vanilla JavaScript, combined with basic HTML and CSS, was a conscious choice. It empowered me to grasp the fundamental principles of web development, ensuring a strong foundation without the distraction of complex frameworks or libraries.',
      image: '',
    },
    purpose: {
      title: 'A Testament to Learning',
      subtitle: 'From Classroom to Real-world Application',
      description:
        'A pivotal project in the Udacity Front-End Nanodegree, this Memory Game became a testament to my dedication and readiness for an entry-level web development role. It was an affirmation of my skills, my learning curve, and my commitment to the craft.',
      image: '',
    },
    resources: ['#1', '#2', '#3'],
    link: 'https://robert-s-hogan.github.io/Project-Memory-Game/',
    github: '',
    category: ['JavaScript', 'CSS', 'GithubPages'],
    isUnderConstruction: false,
  },
  {
    slug: 'swapi-plus',
    title: 'SWAPI+: A New Canon Begins',
    mobileTitle: 'SWAPI+: A New Canon Begins',
    image:
      'https://app-assets.vercel.app/apps/swapi-cards/devblog_swapi-plus.jpg',
    description:
      'Redefining the galaxy: An enhanced, interactive showcase of Star Wars characters, centered around the new Disney Canon, built using cutting-edge technologies.',
    process: {
      title: 'Embarking on a Galactic Journey',
      subtitle: 'Bridging Gaps in the Star Wars Universe',
      description:
        'SWAPI+ began as a response to outdated and occasionally erroneous data on swapi.net. Venturing into the vast Star Wars universe, I aimed to emphasize the new Disney Canon while offering richer, more accurate character details.',
      image: '',
    },
    management: {
      title: 'Managing Interstellar Data',
      subtitle: 'Crafting a Holocron of Information',
      description:
        "Managing and curating data from a galaxy far, far away isn't easy. Leveraging serverless functions, SWAPI+ ensures an organized, seamless experience, even as it continues to evolve.",
      image: '',
    },
    media: {
      title: 'Thematic Styles',
      subtitle: 'Aligning with the Force',
      description:
        'A unique feature of SWAPI+ is its thematic styling based on factions. Whether it’s the dark, enigmatic hues of the Sith or the hopeful, bright aesthetics of the Rebels, each section offers a distinct, immersive experience.',
      image: '',
    },
    technologyReason: {
      title: 'Crafting with a Modern Stack',
      subtitle: 'Harnessing the Power of Technology',
      description:
        'React, Next.js, Typescript, API integrations, NX, and TailwindCSS form the backbone of SWAPI+. This state-of-the-art tech stack ensures scalability, efficiency, and a seamless user experience, setting the stage for future enhancements.',
      image: '',
    },
    purpose: {
      title: 'Laying Foundations for the Galaxy',
      subtitle: 'The Journey Begins',
      description:
        'While SWAPI+ is still in its formative phase, its intent is clear: to offer fans a comprehensive, accurate, and interactive Star Wars character experience. The project currently lays the foundation for this ambitious goal, with more features on the horizon.',
      image: '',
    },
    resources: ['#1', '#2', '#3'],
    link: 'https://swapi-cards-nx-monorepo.vercel.app/',
    github: '', // If you do decide to add a GitHub link in the future, you can update this.
    category: ['React', 'Next', 'Typescript', 'API', 'NX', 'TailwindCSS'],
    isUnderConstruction: false,
  },
  {
    slug: 'interactive-map',
    title: 'DnD Campaign Cartographer',
    mobileTitle: 'DnD Campaign MapArt',
    description:
      'Crafted exclusively for Dungeons and Dragons enthusiasts, this map tool facilitates Dungeon Masters in charting their adventures, enabling a cohesive and engaging narrative experience for all players.',
    image: 'https://app-assets.vercel.app/apps/devblog/dev_blog-map.jpg',
    process: {
      title: 'The Art of Cartography in DnD',
      subtitle: 'A Digital Realm for Your Tales',
      description:
        'The map offers a visual manifestation of the intricate scenarios described by the Dungeon Master. With the ability to add, modify, and tailor icons, DMs can meticulously craft their world, ensuring the geography resonates with the unfolding narrative.',
      image: '',
    },
    management: {
      title: 'Masterful Management of Your Realm',
      subtitle: 'Meticulous Details at Your Fingertips',
      description:
        'Every icon on the map encapsulates its unique lore and information. This provides DMs with a comprehensive grasp over every element within their campaign, ensuring no stone is left unturned in their story.',
      image: '',
    },
    media: {
      title: 'Breathtaking Visuals for Immersive Gameplay',
      subtitle: 'Crafted with Modern Web Technologies',
      description:
        "Built with React and styled using TailwindCSS, the map interface offers an enticing, responsive, and intuitive experience. It's not just a map; it's a digital canvas where stories come alive.",
      image: '',
    },
    technologyReason: {
      title: 'Why React, Next, NX, and TailwindCSS?',
      subtitle: 'Tools for an Engaging Fantasy World',
      description:
        'The chosen tech stack ensures a smooth, dynamic, and responsive experience. The amalgamation of these technologies allows for real-time updates and interactions, making the map a living part of the campaign.',
      image: '',
    },
    purpose: {
      title: 'For Dungeon Masters, By a Dungeon Master',
      subtitle: 'Elevate Your DnD Sessions',
      description:
        "Born out of a passion for Dungeons and Dragons and the desire to enhance group gameplay. The Interactive Map is more than a tool; it's a companion for DMs and players alike, enabling richer storytelling and captivating encounters.",
      image: '',
    },
    resources: ['#1', '#2', '#3'],
    link: 'https://www.roberthogan.dev/projects/dnd-interactive-map',
    github: '',
    category: ['React', 'Next', 'NX', 'TailwindCSS'],
    isUnderConstruction: true,
  },
  {
    slug: 'custom-google-search',
    title: 'Freelance Web Scout',
    mobileTitle: 'Solo Web Scout',
    image:
      'https://app-assets.vercel.app/apps/devblog/devblog_custom_search_new.jpg',
    description:
      'Empowering freelance web developers with the toolset to discover potential clientele through aging websites in need of a facelift.',
    process: {
      title: 'Crafting A Digital Prospector',
      subtitle: 'Discovering Websites Lost in Time',
      description:
        "I embarked on the journey to develop a tool that harnesses Google's Custom Search API, tailored to sieve through the vast internet and unearth older websites. With parameters like website age, file type, and specific exclusion terms, this tool offers targeted search results that identify websites ripe for rejuvenation.",
      image: '',
    },
    management: {
      title: 'Efficient Search Management',
      subtitle: 'Optimized Searches with Precision',
      description:
        'By integrating specific parameters, the tool efficiently pinpoints older websites, enabling developers to propose modern redesigns and optimizations. The exclusion terms ensure more accurate search results, sidestepping unnecessary or irrelevant listings.',
      image: '',
    },
    media: {
      title: 'A User-Friendly Interface',
      subtitle: 'Simplicity Meets Functionality',
      description:
        'Built with React and styled with TailwindCSS, the tool’s interface is intuitive and streamlined. Freelancers can easily input their search criteria and quickly generate a list of potential leads.',
      image: '',
    },
    technologyReason: {
      title: 'Why Google’s Custom Search API?',
      subtitle: 'The Power of Advanced Search',
      description:
        "I opted for Google's Custom Search API due to its robustness and adaptability. Tailoring search parameters allowed me to achieve a higher degree of accuracy, ensuring users find exactly what they're looking for, and in this case, websites needing a refresh.",
      image: '',
    },
    purpose: {
      title: 'Empowering the Freelance Community',
      subtitle: 'Generating Valuable Leads',
      description:
        'This tool serves more than just a technical exercise. It embodies a solution for freelancers, aiding them in the hunt for potential clients and opportunities. The ability to identify aging websites presents a niche yet valuable market for web developers.',
      image: '',
    },
    resources: ['#1', '#2', '#3'],
    link: '',
    github: '',
    category: ['React', 'TailwindCSS', 'Google'],
    isUnderConstruction: true,
  },
];


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/_app.tsx
───────────────────────────────────────────────
import type { AppProps, NextWebVitalsMetric } from 'next/app';

import { GoogleTagManager } from '@with-nx/analytics';
import { ThemeProvider } from '@with-nx/theme';
import { themes } from '../styles/themes';
import '../styles/styles.css';

function CustomApp({ Component, pageProps }: AppProps) {
  return (
    <ThemeProvider themes={themes} initialThemeName="dark">
      <main className="app">
        <Component {...pageProps} />
      </main>
      <GoogleTagManager />
    </ThemeProvider>
  );
}

export function reportWebVitals(metric: NextWebVitalsMetric) {
  // Conversion to seconds and minutes
  const valueInMilliseconds = metric.value;
  const valueInSeconds = (valueInMilliseconds / 1000).toFixed(2);

  // Logging the converted values
  console.log(`${metric.name} - Seconds: ${valueInSeconds}`);

  if (
    process.env.NODE_ENV !== 'production' &&
    metric.name === 'CLS' &&
    metric.value
  ) {
    console.error('NONZERO CLS ', metric.value);
  }
}

export default CustomApp;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/_document.tsx
───────────────────────────────────────────────
import Document, { Html, Head, Main, NextScript } from 'next/document';
import { GoogleFontLoader } from '@with-nx/theme';

class MyDocument extends Document {
  handleOnLoad = (event) => {
    event.target.onload = null;
    event.target.rel = 'stylesheet';
  };

  render() {
    return (
      <Html lang="en">
        <Head>
          <GoogleFontLoader
            fonts={[
              { fontFamily: 'Golos Text', fontWeights: '400;600;700;900' },
              { fontFamily: 'Silkscreen', fontWeights: '' },
            ]}
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

export default MyDocument;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/404.js
───────────────────────────────────────────────
import { Heading, Text } from '@with-nx/generic-ui/';
import Link from 'next/link';

import Layout from '../components/DevBlogLayout';
import DevBlogSection from '../components/DevBlogSection';

const devBlogLinks = [
  { id: 'home', text: 'Home', href: '/' },
  { id: 'blog', text: 'Blog', href: '/blog' },
  { id: 'about', text: 'About', href: '/about' },
  { id: 'contact', text: 'Contact', href: '/contact' },
];

export default function Custom404() {
  return (
    <Layout>
      <DevBlogSection>
        <Heading level={1} text="404 - Page Not Found" />
        <Text text="Oops! The page you're looking for doesn't seem to exist." />
        <Text text="Maybe you were looking for one of these:" />
        <ul>
          {devBlogLinks.map((item) => (
            <li key={item.id}>
              {item.href ? (
                <Link href={item.href}>{item.text}</Link>
              ) : (
                <Text text={item.text} />
              )}
            </li>
          ))}
        </ul>
      </DevBlogSection>
    </Layout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/api/assistant.ts
───────────────────────────────────────────────
// pages/api/assistant.js
import { Configuration, OpenAIApi } from 'openai';

const assistantHandler = async (req, res) => {
  if (req.method === 'POST') {
    const { prompt } = req.body;

    const configuration = new Configuration({
      apiKey: process.env.OPENAI_API_KEY,
    });
    const openai = new OpenAIApi(configuration);

    try {
      const response = await openai.createChatCompletion({
        model: 'asst_2PyBV92ER5H3s40w298zu3w1',
        messages: [{ role: 'user', content: prompt }],
      });
      res.status(200).json(response.data);
    } catch (error) {
      console.error('OpenAI API error:', error);
      if (error.response) {
        console.error('Error response:', error.response.data);
      }
      res.status(500).json({
        message: 'Failed to fetch response from OpenAI',
        details: error.message,
      });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
};

export default assistantHandler;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/api/chat.ts
───────────────────────────────────────────────
// pages/api/chat.js
import { Configuration, OpenAIApi } from 'openai';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});
const openai = new OpenAIApi(configuration);

export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { messages } = req.body; // Expect an array of message objects

    try {
      const completion = await openai.createChatCompletion({
        model: 'gpt-3.5-turbo', // Adjust the model as needed
        messages: messages,
      });

      res.status(200).json(completion.data);
    } catch (error) {
      console.error(
        'Error in generateText:',
        error.response ? error.response.data : error
      );
      res.status(500).json({
        error: 'Failed to fetch response from OpenAI',
        details: error.message,
      });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/api/contact.ts
───────────────────────────────────────────────
import type { NextApiRequest, NextApiResponse } from 'next';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '@with-nx/firebase';

type Data = {
  message: string;
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  if (req.method === 'POST') {
    const { name, email, message } = req.body;

    // Validate the input
    if (!name || !email || !message) {
      return res.status(400).json({ message: 'All fields are required' });
    }

    try {
      // Add a new document with a generated id
      await addDoc(collection(db, 'contacts'), {
        name,
        email,
        message,
        timestamp: new Date(),
      });
      return res.status(200).json({ message: 'Message sent successfully' });
    } catch (error) {
      console.error('Error adding document:', error); // Debug log
      return res.status(500).json({ message: 'Internal Server Error' });
    }
  }

  // Handle any other HTTP method
  res.setHeader('Allow', ['POST']);
  res.status(405).end(`Method ${req.method} Not Allowed`);
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/api/creature-generator/generate.ts
───────────────────────────────────────────────
import { Configuration, OpenAIApi } from 'openai';
import Bottleneck from 'bottleneck';
import {
  dndSizes,
  languages,
  specialTraits,
  environments,
  alignments,
  species,
} from '@with-nx/constants';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_DEVBLOG_CREATURE_GENERATOR_API_KEY,
});

const openai = new OpenAIApi(configuration);

const limiter = new Bottleneck({
  minTime: (60 * 1000) / 60, // 1000 milliseconds per request if 60 requests per minute
});

// Add Bottleneck event listeners for debugging and monitoring
limiter.on('failed', async (error, jobInfo) => {
  const id = jobInfo.options.id;
  console.log(`Job ${id} failed: ${error}`);
  if (jobInfo.retryCount < 2) {
    // Here you can set a retry limit
    console.log(`Retrying job ${id} in 25ms!`);
    return 25; // Reschedule the job to run after 25 ms
  }
});

// Handling job completion, including both success and failure after all retries.

function extractJson(text) {
  const regex = /{[\s\S]*}/; // Matches the first occurrence of JSON-like content
  const matches = text.match(regex);
  return matches ? matches[0] : null;
}

function generatePrompt(
  numberOfPlayers,
  playerLevel,
  {
    challengeRating,
    creatureType,
    alignment,
    environment,
    size,
    specialTrait,
    language,
  }
) {
  // Ensuring the function utilizes provided data or fallbacks
  const actualCreatureType = creatureType || 'unknown creature type';
  const actualSize = size || 'medium';
  const actualEnvironment = environment || 'generic environment';
  const actualAlignment = alignment || 'neutral';
  const actualSpecialTrait = specialTrait || 'no special trait';
  const actualLanguage = language || 'common language';
  const actualChallengeRating = challengeRating || '1'; // Default to 1 if not provided

  return `Create a detailed description of a ${actualCreatureType} suitable for a D&D game with a party of ${numberOfPlayers} players at level ${playerLevel}, with a challenge rating of ${actualChallengeRating}. The creature is of size ${actualSize}, lives in a ${actualEnvironment}, and has an alignment of ${actualAlignment}. It has a special trait: ${actualSpecialTrait}, and can communicate in ${actualLanguage}.

The creature should have the following properties in a JSON-like format:

{
  "name": "${actualCreatureType}",
  "description": "Describe a ${actualSize} ${actualCreatureType} living in a ${actualEnvironment} with ${actualAlignment} alignment. It should look distinct and have the special trait of ${actualSpecialTrait}.",
  "imagePrompt": "Create an image of a ${actualSize} ${actualCreatureType} with characteristics of a ${actualEnvironment} creature, showcasing the trait of ${actualSpecialTrait}. The creature should reflect the alignment of ${actualAlignment} and be depicted in an appropriate setting for a D&D game.",
  "armorClass": "Specify armor class",
  "hitPoints": "Specify hit points",
  "speed": "Specify speed",
  "strength": "Specify strength",
  "dexterity": "Specify dexterity",
  "constitution": "Specify constitution",
  "intelligence": "Specify intelligence",
  "wisdom": "Specify wisdom",
  "charisma": "Specify charisma",
  "actions": [
    {
      "name": "Primary Action",
      "damage": "Specify damage",
      "reach": "Specify reach (ft)"
    }
  ],
  "specialAbilities": [
    {
      "name": "${actualSpecialTrait}",
      "description": "Detailed description of how the special trait ${actualSpecialTrait} impacts the creature's abilities or behavior."
    }
  ]
}
Now, create a similar creature: `;
}

function validateAndCorrectJson(jsonString) {
  let json;
  try {
    json = JSON.parse(jsonString);
  } catch (error) {
    console.error('Initial JSON parse failed:', error.message);
    throw new Error('Initial JSON parse failed: ' + error.message);
  }

  // Ensure actions and special abilities are arrays
  if (!Array.isArray(json.actions)) {
    json.actions = [];
  }
  if (!Array.isArray(json.specialAbilities)) {
    json.specialAbilities = [];
  }

  return json;
}

async function fetchCompletion(prompt) {
  try {
    const completion = await limiter.schedule(() =>
      openai.createCompletion({
        model: 'gpt-3.5-turbo-instruct',
        prompt: prompt,
        max_tokens: 1500,
        temperature: 0.7,
      })
    );
    if (!completion || !completion.data) {
      throw new Error('No completion data returned from OpenAI.');
    }
    const responseText = completion.data.choices[0].text;
    const jsonString = extractJson(responseText);
    if (!jsonString) {
      throw new Error('No JSON found in response.');
    }
    console.log('Extracted JSON String:', jsonString);
    const parsedData = validateAndCorrectJson(jsonString);
    console.log('Parsed JSON Data:', parsedData);
    return parsedData;
  } catch (error) {
    console.error('Error with OpenAI API request:', error);
    throw new Error(
      'Error parsing JSON or OpenAI API request: ' + error.message
    );
  }
}

function generateRandomValues(data) {
  return {
    challengeRating: data.challengeRating || Math.floor(Math.random() * 30) + 1,
    creatureType:
      data.creatureType || species[Math.floor(Math.random() * species.length)],
    alignment:
      data.alignment ||
      alignments[Math.floor(Math.random() * alignments.length)],
    environment:
      data.environment ||
      environments[Math.floor(Math.random() * environments.length)],
    size: data.size || dndSizes[Math.floor(Math.random() * dndSizes.length)],
    specialTrait:
      data.specialTrait ||
      specialTraits[Math.floor(Math.random() * specialTraits.length)],
    language:
      data.language || languages[Math.floor(Math.random() * languages.length)],
  };
}

export default async function handler(req, res) {
  if (!configuration.apiKey) {
    return res
      .status(500)
      .json({ error: { message: 'OpenAI API key not configured' } });
  }

  const { numberOfPlayers, playerLevel } = req.body;

  if (!numberOfPlayers || !playerLevel) {
    return res.status(400).json({
      error: {
        message: 'Missing required fields numberOfPlayers or playerLevel',
      },
    });
  }

  const completeData = generateRandomValues(req.body);

  const prompt = generatePrompt(numberOfPlayers, playerLevel, completeData);

  try {
    const result = await fetchCompletion(prompt);
    console.log('Result from fetchCompletion:', result);
    return res.status(200).json({
      result: result,
      message: 'Creature generated successfully',
    });
  } catch (error) {
    console.error('Error during the request process:', error);
    return res.status(500).json({
      error: {
        message: 'An error occurred during your request: ' + error.message,
      },
    });
  }
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/api/creature-generator/generateImage.ts
───────────────────────────────────────────────
// /pages/api/generateImage.js
import { Configuration, OpenAIApi } from 'openai';
import Bottleneck from 'bottleneck';

const configuration = new Configuration({
  apiKey: process.env.OPENAI_DEVBLOG_CREATURE_GENERATOR_API_KEY,
});
const openai = new OpenAIApi(configuration);

// Defines a limiter that allows 2000 requests per minute
const limiter = new Bottleneck({
  minTime: (60 * 1000) / 2000,
});

export default async function generateImageHandler(req, res) {
  const { imagePrompt } = req.body;

  try {
    const response = await limiter.schedule(() =>
      openai.createImage({
        prompt: imagePrompt,
        n: 1,
        size: '512x512',
      })
    );

    const imageUrl = response.data.data[0].url;
    res.status(200).json({ imageUrl });
  } catch (error) {
    console.error('Detailed Error: ', error);
    if (error.response) {
      console.error(error.response.status, error.response.data);
      res.status(error.response.status).json(error.response.data);
    } else {
      console.error(`Error with OpenAI API request: ${error.message}`);
      res.status(500).json({
        error: {
          message: 'An error occurred during your request.',
        },
      });
    }
  }
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/api/pagespeed.ts
───────────────────────────────────────────────
//pages/api/pagespeed.ts

import axios from 'axios';
import { NextApiRequest, NextApiResponse } from 'next';

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  const { query: { url = '' } = {} } = req;

  try {
    const response = await axios.get(
      `https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url=${url}&key=${process.env.NEXT_PUBLIC_PAGESPEED_INSIGHTS}`
    );
    const data = response.data;

    res.status(200).json(data);
  } catch (error) {
    res
      .status(500)
      .json({ error: 'Error fetching data from PageSpeed Insights API.' });
  }
};

export default handler;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/blog/[slug].tsx
───────────────────────────────────────────────
import { useRouter } from 'next/router';

import DevBlogLayout from '../../components/DevBlogLayout';
import { Section } from '../../components/atomic/organisms/Section';
import { Heading } from '@with-nx/generic-ui';

const WP_API_BASE_URL =
  'https://public-api.wordpress.com/wp/v2/sites/robertshogandev.wordpress.com';

export async function getSortedPostsData(slug?: string) {
  const categoriesRes = await fetch(`${WP_API_BASE_URL}/categories`);
  const categories = await categoriesRes.json();

  const categoryMap = categories.reduce((acc, category) => {
    acc[category.id] = category.name;
    return acc;
  }, {});

  let postsRes;
  if (slug) {
    postsRes = await fetch(`${WP_API_BASE_URL}/posts?slug=${slug}`);
  } else {
    postsRes = await fetch(`${WP_API_BASE_URL}/posts`);
  }
  const posts = await postsRes.json();

  return posts.map((post) => ({
    id: post.slug,
    title: post.title.rendered,
    date: new Date(post.date).toLocaleDateString(),
    contentHtml: post.content.rendered, // Ensure this is the correct path to the post content
    categories: post.categories.map(
      (categoryId) => categoryMap[categoryId] || 'Uncategorized'
    ),
  }));
}

export async function getStaticPaths() {
  const posts = await getSortedPostsData(); // Fetch all posts to generate paths
  const paths = posts.map((post) => ({
    params: { slug: post.id },
  }));

  return { paths, fallback: 'blocking' };
}

export async function getStaticProps({ params }) {
  const postData = await getSortedPostsData(params.slug);
  const post = postData[0]; // Assuming getSortedPostsData returns an array

  if (!post) {
    return { notFound: true };
  }

  return {
    props: {
      post,
    },
  };
}

export default function Post({ post }) {
  const router = useRouter();

  if (router.isFallback) {
    return <div>Loading...</div>;
  }

  return (
    <DevBlogLayout>
      <Section className="space-y-6">
        <article className="space-y-8 px-4">
          <Heading level={1} text={post.title} />
          <div
            className="space-y-6"
            dangerouslySetInnerHTML={{ __html: post.contentHtml }}
          />
        </article>
      </Section>
    </DevBlogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/blog/blog.module.css
───────────────────────────────────────────────
/* .grid {
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-gap: 1rem;
  grid-auto-rows: minmax(100px, auto);
}
.gridItem {
  border: 1px solid #ccc;
  padding: 12px;
  display: flex;
  flex-direction: column;
} */
.gridItem {
  margin: 1rem 0;
}
.title {
  /* text-align: center; */
  /* margin: 2rem 0; */
  font-size: 2rem;
  /* color: white; */
}
.date {
  font-size: 0.75rem;
  color: grey;
}
.category {
  font-size: 1rem;
  text-transform: uppercase;
  font-weight: bold;
}

@media (min-width: 768px) {
  .grid {
    grid-template-columns: repeat(2, 1fr);
  }
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/blog/index.tsx
───────────────────────────────────────────────
import Link from 'next/link';
import DevBlogLayout from '../../components/DevBlogLayout';
import { Section } from '../../components/atomic/organisms/Section';
import { Flex, Heading, Text } from '@with-nx/generic-ui';
// Define the base URL for your WordPress API
const WP_API_BASE_URL =
  'https://public-api.wordpress.com/wp/v2/sites/robertshogandev.wordpress.com';

// Function to fetch posts and map category IDs to names
export async function getSortedPostsData(slug?: string) {
  const categoriesRes = await fetch(`${WP_API_BASE_URL}/categories`);
  const categories = await categoriesRes.json();

  const categoryMap = categories.reduce((acc, category) => {
    acc[category.id] = category.name;
    return acc;
  }, {});

  let postsRes;
  if (slug) {
    postsRes = await fetch(`${WP_API_BASE_URL}/posts?slug=${slug}`);
  } else {
    postsRes = await fetch(`${WP_API_BASE_URL}/posts`);
  }
  const posts = await postsRes.json();

  return posts.map((post) => ({
    id: post.slug,
    title: post.title.rendered,
    date: new Date(post.date).toLocaleDateString(),
    categories: post.categories.map(
      (categoryId) => categoryMap[categoryId] || 'Uncategorized'
    ),
  }));
}

// Use getStaticProps to fetch posts at build time
export async function getStaticProps() {
  const allPostsData = await getSortedPostsData();
  return {
    props: {
      allPostsData,
    },
  };
}

export default function Home({ allPostsData }) {
  return (
    <DevBlogLayout>
      <Section className="space-y-6">
        <Heading level={1} className="font-bold" text="Digital Garden" />
        <Text
          className="text-center"
          text="A collection of topics, notes, and half-baked explorations I'm always tending to."
        />
        <div className="grid grid-cols-1 gap-6 space-y-2 md:grid-cols-2 md:space-y-0 lg:grid-cols-3">
          {allPostsData.map(({ id, date, title, categories }) => (
            <div key={id} className="rounded-md p-4">
              <Link href={`/blog/${id}`}>
                <Text className="" text={title} />
              </Link>
              <Flex className="mt-4 items-center space-x-4 md:mt-0">
                <Text className="text-sm" text={categories.join(', ')} />
                <Text className="text-xs" text={date} />
              </Flex>
            </div>
          ))}
        </div>
      </Section>
    </DevBlogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/case-study/broadway-media/index.tsx
───────────────────────────────────────────────
// apps/devblog/pages/case-study/broadway-media.tsx

'use client';

import React from 'react';
import DevBlogLayout from '../../../components/DevBlogLayout';
import DevBlogSection from '../../../components/DevBlogSection';
import Compare from '../../../components/Compare';
import { Heading, Text } from '@with-nx/generic-ui';

export default function BroadwayMediaCaseStudy() {
  return (
    <DevBlogLayout
      title="Case Study: Broadway Media"
      description="Detailed look into the Broadway Media project, focusing on the NX Monorepo, Stripe integration, and significant performance & business outcomes."
      hideNavBar={false}
    >
      {/* PAGE TITLE & INTRO */}
      <DevBlogSection>
        <Heading
          level={2}
          className="mb-4 text-center"
          text="Broadway Media: Building a Modern & Scalable Platform"
        />
        <hr className="bg-primary mx-auto mb-8 h-2 w-16" />
      </DevBlogSection>

      {/* OVERVIEW SECTION */}
      <DevBlogSection>
        <Heading
          level={3}
          className="mb-2 text-xl font-bold"
          text="Project Overview"
        />
        <Text
          className="mb-4 text-base"
          text="Broadway Media is a media company that specializes in digital signage and content management. They required a modernized, scalable platform to support e-commerce capabilities, efficient code sharing, and faster product release cycles."
        />
        <Text
          className="mb-4 text-base"
          text="During my tenure from June 2022 to May 2023, I worked as a Senior Engineer focusing on front-end architecture, performance optimization, and integrating third-party services like Stripe."
        />
      </DevBlogSection>

      {/* MY ROLE & CHALLENGES */}
      <DevBlogSection>
        <Heading
          level={3}
          className="mb-2 text-xl font-bold"
          text="My Role & Key Challenges"
        />
        <ul className="list-inside list-disc space-y-2 pl-4">
          <li>
            <strong>NX Monorepo Setup:</strong> Optimized the company’s monorepo
            environment to improve code sharing and reduce build times.
          </li>
          <li>
            <strong>Stripe Integration:</strong> Implemented a new subscription
            and payment flow, enhancing Broadway Media’s e-commerce features.
          </li>
          <li>
            <strong>API Development & UI/UX Collaboration:</strong> Partnered
            with cross-functional teams to refine the user experience and ensure
            a scalable, well-documented API.
          </li>
          <li>
            <strong>Speeding Up Release Cycles:</strong> Tackled dependency
            bloat and inconsistent code practices to enable faster, more
            reliable deployments.
          </li>
        </ul>
      </DevBlogSection>

      {/* TECHNOLOGIES & APPROACH */}
      <DevBlogSection>
        <Heading
          level={3}
          className="mb-2 text-xl font-bold"
          text="Technologies & Approach"
        />
        <Text
          className="mb-4 text-base"
          text="We leveraged a React + Next.js stack within an Nx Monorepo for modular code organization and faster builds. Redux Toolkit handled state management, while Stripe ensured secure payment processing."
        />
        <div className="mb-4">
          <Text
            className="text-base font-semibold"
            text="Key Technologies Included:"
          />
          <ul className="mt-2 list-inside list-disc space-y-2 pl-4">
            <li>React & Next.js</li>
            <li>TypeScript</li>
            <li>Nx Monorepo</li>
            <li>Redux Toolkit</li>
            <li>Stripe Integration</li>
            <li>Custom CSS</li>
          </ul>
        </div>
      </DevBlogSection>

      {/* KEY METRICS & OUTCOMES */}
      <DevBlogSection>
        <Heading
          level={3}
          className="mb-2 text-xl font-bold"
          text="Key Metrics & Outcomes"
        />
        <ul className="list-inside list-disc space-y-2 pl-4">
          <li>
            <strong>Revenue Growth (+15%):</strong> Spearheaded the Stripe
            integration, boosting e-commerce capabilities and increasing revenue
            in the first quarter post-launch.
          </li>
          <li>
            <strong>Code Efficiency (+30%):</strong> Optimized the Nx monorepo
            environment for better code sharing and reduced build times by 25%.
          </li>
          <li>
            <strong>User Satisfaction (+20%):</strong> Collaborated on API-level
            improvements and refined UI/UX design, leading to higher user
            satisfaction scores.
          </li>
          <li>
            <strong>Productivity Increase (+40%):</strong> Accelerated product
            release cycles by streamlining development processes with
            cross-functional teams.
          </li>
        </ul>
      </DevBlogSection>

      {/* SCREENSHOTS SECTION */}
      <DevBlogSection>
        <Heading
          level={3}
          className="mb-2 text-xl font-bold"
          text="Project Screenshots"
        />
        <Text
          className="mb-4 text-base"
          text="Below are snapshots from the development process, highlighting two major sections of the platform."
        />

        {/* STORE (CATALOG) */}
        <div className="mb-8 flex flex-col space-y-8">
          <div className="rounded-3xl border border-neutral-200 bg-neutral-100 p-4 dark:border-neutral-800 dark:bg-neutral-900">
            <Heading
              level={4}
              className="mb-2 text-lg font-semibold"
              text="Catalog / Store"
            />
            <div className="mb-2 flex w-full items-center justify-between">
              <span className="text-xs">Before</span>
              <span className="text-xs">After</span>
            </div>
            <Compare
              firstImage="https://rhogandev.wordpress.com/wp-content/uploads/2025/03/screen-shot-2022-09-06-at-10.58.38-am.png"
              secondImage="https://rhogandev.wordpress.com/wp-content/uploads/2025/03/catalog_after.png"
              firstImageClassName="object-cover object-left-top"
              secondImageClassname="object-cover object-left-top"
              className="h-[250px] w-full md:h-[500px]"
              slideMode="hover"
            />
          </div>
          <Text
            className="text-base"
            text={
              "The original catalog didn't have a proper store. We integrated a shopping cart with a theatre-inspired design, giving users a clear path to browse and purchase digital signage solutions. The new layout uses custom CSS to maintain branding consistency and create a more immersive shopping experience."
            }
          />
        </div>

        {/* PRODUCTION EDITOR */}
        <div className="mb-8 flex flex-col space-y-8">
          <div className="rounded-3xl border border-neutral-200 bg-neutral-100 p-4 dark:border-neutral-800 dark:bg-neutral-900">
            <Heading
              level={4}
              className="mb-2 text-lg font-semibold"
              text="Production Editor"
            />
            <div className="mb-2 flex w-full items-center justify-between">
              <span className="text-xs">Before</span>
              <span className="text-xs">After</span>
            </div>
            <Compare
              firstImage="https://rhogandev.wordpress.com/wp-content/uploads/2025/03/screen-shot-2022-08-12-at-3.54.22-pm.png"
              secondImage="https://rhogandev.wordpress.com/wp-content/uploads/2025/03/screenshot-2023-01-23-at-10.53.37-am.png"
              firstImageClassName="object-cover object-left-top"
              secondImageClassname="object-cover object-right-top"
              className="h-[250px] w-full md:h-[500px]"
              slideMode="hover"
            />
          </div>
          <Text
            className="text-base"
            text={
              "The Production Editor didn't exist until our team created it from scratch. I helped with the UI, component architecture, and design creation using custom CSS. This editor allowed users to quickly upload, preview, and schedule digital signage content in an intuitive way."
            }
          />
        </div>
      </DevBlogSection>

      {/* CONCLUSION */}
      <DevBlogSection>
        <Heading
          level={3}
          className="mb-2 text-xl font-bold"
          text="Conclusion"
        />
        <Text
          className="mb-4 text-base"
          text="Broadway Media’s platform transformation showcased the advantages of a well-structured Nx Monorepo, strategic third-party integrations like Stripe, and close collaboration across teams. The results speak for themselves: increased revenue, faster release cycles, and improved user satisfaction."
        />
        <Text
          className="mb-4 text-base"
          text="This project was an excellent opportunity to leverage my experience in front-end engineering, system architecture, and team leadership to deliver tangible results that continue to shape Broadway Media’s digital presence."
        />
        <Text
          className="text-base"
          text="If you have questions or want to learn more about how these solutions were implemented, feel free to reach out!"
        />
      </DevBlogSection>
    </DevBlogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/case-study/lykas/index.tsx
───────────────────────────────────────────────
'use client';

import React from 'react';
import DevBlogLayout from '../../../components/DevBlogLayout';
import DevBlogSection from '../../../components/DevBlogSection';
import { Heading, Text } from '@with-nx/generic-ui';

export default function LykasCaseStudy() {
  return (
    <DevBlogLayout
      title="Case Study: LYKAS"
      description="Deep dive into the LYKAS project, focusing on Vue.js + Pinia migration, atomic design refactoring, and overall performance & business outcomes."
      hideNavBar={false}
    >
      <DevBlogSection fullWidth={false} className="py-32">
        {/* PAGE TITLE & INTRO */}
        <Heading
          level={2}
          className="mb-4 text-center"
          text="LYKAS: Transforming a Legacy Questionnaire into a Modular Vue App"
        />
        <hr className="bg-primary mx-auto mb-8 h-2 w-16" />

        {/* OVERVIEW SECTION */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Project Overview"
          />
          <Text
            className="mb-4 text-base"
            text="LYKAS required a comprehensive refactor of an existing Python/HTML project, which included a lengthy 4,000+ line file. The goal was to transform this monolithic solution into a modern, modular Vue.js application with Pinia for state management, while incorporating an atomic design approach."
          />
          <Text
            className="mb-4 text-base"
            text="The key focus was to maintain existing functionality for setting up trusts and legal questionnaires, all without compromising on user experience or performance. Due to NDA constraints, certain specifics (like code snippets or visual layouts) are not shown."
          />
        </DevBlogSection>

        {/* MY ROLE & KEY CHALLENGES */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="My Role & Key Challenges"
          />
          <ul className="list-inside list-disc space-y-2 pl-4">
            <li>
              <strong>Vue.js Migration:</strong> Converted the core
              functionality from Python/HTML into reusable, componentized Vue.js
              modules.
            </li>
            <li>
              <strong>State Management Optimization:</strong> Implemented Pinia
              to streamline and centralize state updates, improving efficiency
              by 30%.
            </li>
            <li>
              <strong>Atomic Design Refactoring:</strong> Broke down a massive
              single-page file into a suite of UI components organized by atoms,
              molecules, and organisms for better code reuse and
              maintainability.
            </li>
            <li>
              <strong>Performance & Testing:</strong> Achieved a 35% decrease in
              page load times through optimized bundling and wrote unit tests to
              bring code coverage to 90%.
            </li>
          </ul>
        </DevBlogSection>

        {/* TECHNOLOGIES & APPROACH */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Technologies & Approach"
          />
          <Text
            className="mb-4 text-base"
            text="The project leveraged Vue.js for front-end rendering, TypeScript for type safety, and Pinia as a lightweight yet powerful state management library. An atomic design methodology ensured that smaller, reusable components could be assembled into larger features efficiently."
          />
          <div className="mb-4">
            <Text
              className="text-base font-semibold"
              text="Key Technologies Included:"
            />
            <ul className="mt-2 list-inside list-disc space-y-2 pl-4">
              <li>Vue.js</li>
              <li>TypeScript</li>
              <li>Pinia</li>
              <li>Atomic Design Principles</li>
              <li>CI/CD Pipelines</li>
              <li>Python (Legacy Back-End)</li>
            </ul>
          </div>
        </DevBlogSection>

        {/* KEY METRICS & OUTCOMES */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Key Metrics & Outcomes"
          />
          <ul className="list-inside list-disc space-y-2 pl-4">
            <li>
              <strong>Enhanced User Engagement (+25%):</strong> Modernized
              front-end with Vue.js, improving usability and interface
              responsiveness.
            </li>
            <li>
              <strong>State Efficiency (+30%):</strong> Moved to Pinia,
              resulting in more streamlined data flow and updates.
            </li>
            <li>
              <strong>Quality Assurance (+90% Code Coverage):</strong> Added
              comprehensive unit and integration tests, reducing bugs in
              production by 40%.
            </li>
            <li>
              <strong>Faster Delivery (+20%):</strong> Collaborated
              cross-functionally to shorten development cycles and deploy new
              features more quickly.
            </li>
            <li>
              <strong>CI/CD Pipelines (+50% Deployment Speed):</strong>
              Implemented automated pipelines, slashing deployment times and
              increasing release frequency.
            </li>
            <li>
              <strong>Performance Gains (-35% Load Times):</strong> Refactored
              and optimized front-end components and bundling processes to
              improve page load speeds.
            </li>
          </ul>
        </DevBlogSection>

        {/* SCREENSHOTS SECTION */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Project Screenshots"
          />

          <div className="mb-8 flex flex-col space-y-8">
            <Text
              className="text-base"
              text={
                'Although visuals are not shown, the refactored application now follows a structured atomic design system, making it easier to maintain and scale.'
              }
            />
          </div>
        </DevBlogSection>

        {/* CONCLUSION */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Conclusion"
          />
          <Text
            className="mb-4 text-base"
            text="This LYKAS case study demonstrates the power of a modern Vue.js stack combined with Pinia and atomic design principles. By refactoring a single 4,000+ line Python/HTML file into modular components, we not only improved performance and maintainability but also opened the door for easier team collaboration and faster feature rollouts."
          />
          <Text
            className="mb-4 text-base"
            text="The project underscores the importance of solid testing practices, effective state management, and a well-considered design methodology—all of which contributed to measurable gains in user engagement, code quality, and deployment speed."
          />
          <Text
            className="text-base"
            text="For any additional details or inquiries (within NDA limits), feel free to reach out!"
          />
        </DevBlogSection>
      </DevBlogSection>
    </DevBlogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/case-study/whited-pto/index.tsx
───────────────────────────────────────────────
// apps/devblog/pages/case-study/whited-pto.tsx

'use client';
import React from 'react';

import { Heading, Text } from '@with-nx/generic-ui';
import DevBlogLayout from '../../../components/DevBlogLayout';
import DevBlogSection from '../../../components/DevBlogSection';
import Compare from '../../../components/Compare';

export default function WhitedPTOCaseStudy() {
  return (
    <DevBlogLayout
      title="Case Study: Whited PTO"
      description="A work-in-progress case study showcasing the ongoing Whited PTO redesign."
      hideNavBar={false}
    >
      <DevBlogSection fullWidth={false} className="py-32">
        {/* PAGE TITLE & INTRO */}
        <Heading
          level={2}
          className="mb-4 text-center"
          text="Whited PTO: Redesign & Multilingual Support"
        />
        <hr className="bg-primary mx-auto mb-8 h-2 w-16" />

        {/* PROJECT OVERVIEW */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Project Overview"
          />
          <Text
            className="mb-4 text-base"
            text="Whited PTO is a parent-teacher organization website currently undergoing a redesign. The primary goal is to increase parent engagement and support Spanish-speaking families by offering an accessible, multilingual experience. This will be critical for the 2025 school year when we plan to roll out a new WordPress theme."
          />
          <Text
            className="text-base"
            text="Please note that this project is still in the design and user-testing phase."
          />
        </DevBlogSection>

        {/* MOTIVATION */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Motivation"
          />
          <Text
            className="mb-4 text-base"
            text="The current PTO site suffers from low volunteer turnout and limited engagement due to hard-to-find calls-to-action. Additionally, the site does not cater to Spanish-speaking parents, creating a language barrier for a significant portion of the community. By modernizing the platform and incorporating a free educational/non-profit WordPress theme, we aim to create a welcoming, inclusive environment for all families."
          />
        </DevBlogSection>

        {/* KEY FEATURES */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Key Features (Planned)"
          />
          <ul className="list-inside list-disc space-y-2 pl-4">
            <li>Dedicated volunteer sign-up form with clear CTAs</li>
            <li>
              Spanish translation toggle to better serve bilingual families
            </li>
            <li>Mobile-friendly layout using a responsive WordPress theme</li>
            <li>
              Minimal custom styling for a quick, accessible rollout in 2025
            </li>
          </ul>
        </DevBlogSection>

        {/* DESIGN & TOOLS */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Design & Tools"
          />
          <Text
            className="mb-4 text-base"
            text="We are prototyping in Figma to map out the user flow, test various layout ideas, and validate color choices that meet accessibility guidelines. On the technical side, we have a WordPress sandbox environment, where we’re experimenting with a free educational/non-profit theme to minimize custom development efforts."
          />
          <Text
            className="mb-2 text-base font-semibold"
            text="Key Tools & Setup:"
          />
          <ul className="mb-4 list-inside list-disc space-y-2 pl-4">
            <li>Figma (low- to mid-fidelity prototypes & user flow)</li>
            <li>
              WordPress test site (using a free educational/non-profit theme)
            </li>
            <li>Minimal CSS modifications (no Tailwind in final deployment)</li>
            <li>Multilingual plugin exploration for Spanish translation</li>
          </ul>
        </DevBlogSection>

        {/* FIGMA EMBED */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Figma Prototype (In Progress)"
          />
          <Text
            className="mb-4 text-base"
            text="Below is an embedded Figma prototype showcasing our current designs. Feel free to explore different screens and flows. Keep in mind the final styling will reflect the free WordPress theme once integrated."
          />
          <div className="mb-8">
            <iframe
              style={{ border: '1px solid rgba(0, 0, 0, 0.1)' }}
              width="100%"
              height="450"
              src="https://www.figma.com/embed?embed_host=share&url=https://www.figma.com/design/i4WisorQCHHIW8SXLEJcDA/whited-pto?node-id=46-1304&p=f&t=lcAa1Ur0XFPWuK3a-0"
              allowFullScreen
            ></iframe>
          </div>
        </DevBlogSection>

        {/* CURRENT STATUS */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Current Status"
          />
          <Text
            className="mb-4 text-base"
            text="We are in the design and user-feedback phase. No metrics on engagement improvements are available yet, but we have begun collecting informal feedback from a handful of parents. Early impressions suggest that clearer volunteer calls-to-action and a bilingual interface may significantly boost participation."
          />
          <Text
            className="text-base"
            text="Before the 2025 school year starts, we hope to finalize our WordPress theme selection and begin integrating the chosen bilingual plugin."
          />
        </DevBlogSection>

        {/* NEXT STEPS */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Next Steps"
          />
          <Text
            className="mb-4 text-base"
            text="Our immediate focus is establishing the final WordPress theme, setting up the multilingual plugin for Spanish, and refining the volunteer sign-up flow based on user feedback. The full rollout is planned for the 2025 school year, when the site will officially replace the old PTO webpage."
          />
          <Text
            className="text-base"
            text="After launch, we’ll track engagement metrics and parent feedback to guide future updates, ensuring the site remains relevant and user-friendly."
          />
        </DevBlogSection>

        <DevBlogSection>
          <div className="mb-8 flex flex-col space-y-8">
            <div className="rounded-3xl border border-neutral-200 bg-neutral-100 p-4 dark:border-neutral-800 dark:bg-neutral-900">
              <Heading
                level={4}
                className="mb-2 text-lg font-semibold"
                text="Whited PTO"
              />
              <div className="mb-2 flex w-full items-center justify-between">
                <span className="text-xs">Before</span>
                <span className="text-xs">After</span>
              </div>
              <Compare
                firstImage="https://rhogandev.wordpress.com/wp-content/uploads/2025/03/whited-pto_original-1.png"
                secondImage="https://rhogandev.wordpress.com/wp-content/uploads/2025/03/whited-pto_new.png"
                firstImageClassName="object-cover object-left-top"
                secondImageClassname="object-cover object-left-top"
                className="h-[250px] w-full md:h-[500px]"
                slideMode="hover"
              />
            </div>
          </div>
        </DevBlogSection>

        {/* LINKS & REFERENCES */}
        <DevBlogSection>
          <Heading
            level={3}
            className="mb-2 text-xl font-bold"
            text="Links & References"
          />
          <ul className="list-inside list-disc space-y-2 pl-4">
            <li>
              <a
                href="https://www.figma.com/design/i4WisorQCHHIW8SXLEJcDA/whited-pto?node-id=46-1304&p=f&t=lcAa1Ur0XFPWuK3a-0"
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline"
              >
                Figma Prototype Link
              </a>
            </li>
            <li>
              <a
                href="https://testwhitedpto.wordpress.com"
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-600 hover:underline"
              >
                WordPress Test Site
              </a>
            </li>
          </ul>
        </DevBlogSection>
      </DevBlogSection>
    </DevBlogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/index.tsx
───────────────────────────────────────────────
// apps/devblog/pages/index.tsx

'use client';
import React from 'react';

import { Button, Heading, Text } from '../components/atomic/atoms';
import { Section } from '../components/atomic/organisms/Section';
import DevBlogLayout from '../components/DevBlogLayout';
import DevBlogProjectCard from '../components/atomic/molecules/DevBlogProjectCard';
import { Tabs, Tab } from '../components/atomic/molecules/Tabs';
import { ContactForm } from '../components/atomic/molecules/ContactForm/ContactForm';
import ToolsSection from '../components/atomic/molecules/ToolsSection';
import { scrollToProjects } from '../utils/helper';

const yearsExperience = new Date().getFullYear() - 2018;

const volunteerProjects = [
  {
    title: 'Whited PTO',
    description:
      'A comprehensive redesign of a PTO website aimed at boosting parent engagement and enhancing accessibility with multilingual support for Spanish-speaking families.',
    technologies: ['Figma', 'WordPress', 'TailwindCSS', 'Translation Plugin'],
    imageUrl:
      'https://dazzling-rshgymtemplate.wordpress.com/wp-content/uploads/2025/03/whited_pto_case_study.png',
    link: '/case-study/whited-pto',
  },
];

const professionalProjects = [
  {
    title: 'LYKAS',
    description:
      'Refactored an extensive Python/HTML app into a modular Vue.js and Pinia-based solution, focusing on atomic design principles.',
    technologies: ['Vue.js', 'TypeScript', 'Pinia', 'Atomic Design'],
    imageUrl:
      'https://rhogandev.wordpress.com/wp-content/uploads/2025/03/devblog_lykas.jpg',
    link: '/case-study/lykas',
  },
  {
    title: 'Broadway Media',
    description:
      'A media company that specializes in digital signage and content management.',
    technologies: [
      'Nx',
      'TypeScript',
      'React',
      'CSS',
      'Next.js',
      'Stripe',
      'Redux Toolkit',
    ],
    imageUrl: 'https://app-assets.vercel.app/work/broadway_media.png',
    link: '/case-study/broadway-media',
  },
  {
    title: 'Clos Pegase Winery',
    description:
      'A winery located in Calistoga, California, offering wine tastings and tours.',
    technologies: ['jQuery', 'HTML5', 'JavaScript', 'Bootstrap', 'CORESense'],
    imageUrl: 'https://app-assets.vercel.app/work/clos_pegase.png',
    link: 'https://www.clospegase.com/',
  },
  {
    title: 'Windsor Vineyards',
    description:
      'A winery located in Windsor, California, offering custom wine labels and wine tastings.',
    technologies: ['jQuery', 'HTML5', 'JavaScript', 'Bootstrap', 'CORESense'],
    imageUrl: 'https://app-assets.vercel.app/work/windsor_vineyards.png',
    link: 'https://www.windsorvineyards.com/',
  },
];

const sampleTabs: Tab[] = [
  {
    title: 'Professional',
    value: 'Professional',
    content: (
      <div className="from-accent-color to-accent-color relative h-auto w-full rounded-2xl bg-gradient-to-br p-2 text-xl lg:p-10">
        <DevBlogProjectCard projects={professionalProjects} />
      </div>
    ),
  },
  {
    title: 'Volunteer',
    value: 'Volunteer',
    content: (
      <div className="from-accent-color to-accent-color relative h-auto w-full rounded-2xl bg-gradient-to-br p-1 text-xl lg:p-10">
        <DevBlogProjectCard projects={volunteerProjects} />
      </div>
    ),
  },
];

export default function Home() {
  return (
    <DevBlogLayout title="Portfolio | Robert Hogan" hideNavBar={false}>
      {/* ABOUT SECTION */}
      <div id="about" className="relative">
        <Section fullWidth={true} className="bg-secondary-color w-full py-32">
          <div className="container mx-auto">
            <Heading level={2} className="mb-4 text-center" text="About me" />
            <hr className="bg-primary mx-auto mb-8 h-2 w-16" />
            <Text
              className="mx-auto mb-20 max-w-4xl text-xl italic"
              text={`Dedicated Frontend Engineer with over ${yearsExperience} years of experience specializing in Vue.js, React.js, Next.js, and user-centric application development.`}
            />
            <div className="flex flex-col items-start justify-center space-y-8 lg:flex-row lg:items-center lg:space-y-0 lg:space-x-16">
              <div className="w-full text-left lg:w-1/2">
                <Heading
                  level={3}
                  className="mb-4 text-2xl font-bold"
                  text="Get to know me!"
                />
                <Text
                  className="mb-4 text-lg"
                  text="I'm a web developer proficient in JavaScript and the web. I'm passionate about web performance, accessibility, mentoring, user & developer experience."
                />
                <Text
                  className="mb-4 text-lg"
                  text="In my free time, I build side projects and like exploring new technologies. You can see some of my work in the projects section below."
                />
                <Button
                  theme="primary"
                  text="Projects"
                  onClick={() => scrollToProjects('projects')}
                />
              </div>
              <div className="w-full text-left lg:w-1/2">
                <Heading
                  level={3}
                  className="mb-4 text-2xl font-bold"
                  text="My toolkit"
                />
                <ToolsSection />
              </div>
            </div>
          </div>
        </Section>
      </div>

      {/* PROJECTS SECTION */}
      <div id="projects" className="relative">
        <Section className="min-h-[2050px] p-0 py-32 md:min-h-[3050px] lg:min-h-[3250px] xl:min-h-[3100px]">
          <Heading level={2} className="mb-4 text-center" text="Projects" />
          <hr className="bg-primary mx-auto mb-8 h-2 w-16" />
          <div className="relative mx-auto my-40 flex w-full flex-col items-start justify-start [perspective:1200px]">
            <Tabs tabs={sampleTabs} />
          </div>
        </Section>
      </div>

      {/* CONTACT SECTION */}
      <div id="contact" className="relative">
        <Section fullWidth={true} className="bg-secondary-color w-full">
          <Heading level={2} className="mb-4 text-center" text="Contact me" />
          <hr className="bg-primary mx-auto mb-8 h-2 w-16" />
          <ContactForm />
        </Section>
      </div>
    </DevBlogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/paypal-donations-example.tsx
───────────────────────────────────────────────
import React from 'react';
import { Heading } from '@with-nx/generic-ui';

import DevBlogLayout from '../components/DevBlogLayout';
import DevBlogSection from '../components/DevBlogSection';

import { Flex, Grid } from '@with-nx/react-ui';

const PaypalDonationsExample = () => {
  return (
    <DevBlogLayout className="relative">
      <DevBlogSection>
        <Heading level={3} text="Paypal Donation Options" />
        <Grid className="grid-cols-1 px-2 lg:grid-cols-3">
          <Flex className="flex-col space-y-6">
            <iframe
              src="https://www.paypal.com/giving/campaigns?campaign_id=QAB5D5TSL487G"
              title="PayPal donate campaign card"
              frameBorder="0"
              width="382"
              height="550"
              scrolling="no"
            ></iframe>
          </Flex>
        </Grid>
      </DevBlogSection>
    </DevBlogLayout>
  );
};

export default PaypalDonationsExample;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/projects/[slug].tsx
───────────────────────────────────────────────
import { useRouter } from 'next/router';

import { Box, Flex, Heading } from '@with-nx/react-ui';
import { ButtonLink } from '@with-nx/nextjs-react-ui';
import { FiGithub } from 'react-icons/fi';
import { Text } from '@with-nx/generic-ui';

import DevBlogLayout from '../../components/DevBlogLayout';
import { Section } from '../../components/atomic/organisms/Section';
import DevBlogProjectsThemeSection from '../../components/DevBlogProjectsThemeSection';
import { projectsData } from '../../data/projects';

import { getIconForCategory } from '../../utils/getIconForCategory';

function ProjectPage({ project }) {
  const router = useRouter();

  if (router.isFallback || !project) {
    return <p>Project not found!</p>;
  }

  return (
    <DevBlogLayout
      title={`${project.title} | Robert Hogan's Projects`}
      description={project.description}
    >
      <div
        className="relative my-0 bg-cover bg-center"
        style={{ backgroundImage: `url(${project.image})` }}
      >
        <div className="bg-image-overlay absolute inset-0 opacity-50"></div>

        <Section>
          <Heading
            level={1}
            className="relative z-10 my-auto h-full w-auto break-normal pt-32 text-center [text-shadow:_0_1px_0_rgb(0_0_0_/_40%)]"
          >
            <span className="hidden text-5xl [text-shadow:_0_1px_0_rgb(0_0_0_/_40%)] md:inline-block">
              {project.title}
            </span>
            <span className="text-5xl md:hidden">{project.mobileTitle}</span>
          </Heading>

          <Text
            className="relative z-10 text-center"
            text={project.description}
          />

          <div className="relative z-10 mt-8 flex w-full justify-center pb-32">
            <ButtonLink
              href={project.link}
              target="_blank"
              disabled={project.isUnderConstruction}
              className={`${
                project.isUnderConstruction
                  ? 'disabled no-underline'
                  : 'btn-primary'
              }`}
            >
              {project.isUnderConstruction ? (
                <Flex className="cursor-not-allowed items-center space-x-4">
                  Under Construction
                </Flex>
              ) : (
                'Live Project'
              )}
            </ButtonLink>
            {project.github && (
              <Box className="mx-3 text-3xl font-extralight">|</Box>
            )}
            {project.github && (
              <ButtonLink
                href={project.github}
                target="_blank"
                className="btn-secondary icon-white"
              >
                <FiGithub className="h-12 w-12" />
              </ButtonLink>
            )}
          </div>

          <Flex className="mx-auto h-10 max-w-fit items-center justify-center py-2 shadow-lg ">
            {project.category.map((cat) => (
              <span
                key={cat}
                className={`bg-bg-color relative z-10 overflow-hidden rounded-full p-2 text-2xl shadow-lg ${
                  cat === 'GithubPages'
                    ? 'flex items-center justify-center'
                    : ''
                }`}
              >
                {getIconForCategory(cat)}
              </span>
            ))}
          </Flex>
        </Section>
      </div>

      <div className="bg-secondary-color w-full">
        <Section>
          <div className="grid grid-cols-1 gap-12">
            <DevBlogProjectsThemeSection
              title={project.process.title}
              description={project.process.description}
            />
          </div>
        </Section>
      </div>

      <Section className="">
        <DevBlogProjectsThemeSection
          title={project.management.title}
          description={project.management.description}
        />
      </Section>

      <div className="bg-secondary-color w-full">
        <Section>
          <Heading level={2} className="text-xl md:text-5xl">
            {project.media.title}
          </Heading>
          <p>{project.media.description}</p>
        </Section>
      </div>

      <Section className="">
        <DevBlogProjectsThemeSection
          title={project.technologyReason.title}
          description={project.technologyReason.description}
        />
        {/* If you have a list of tech used, map over them here and display as tiles or cards */}
      </Section>

      <div className="bg-secondary-color w-full">
        <Section>
          <Heading level={2} className="text-xl md:text-5xl">
            {project.purpose.title}
          </Heading>
          <Text
            className="leading-relaxed"
            text={project.purpose.description}
          />
        </Section>
      </div>

      {/* {project.resources && (
        <Section maxWidth={true} className="bg-secondary-color">
          <div className="container max-w-7xl mx-auto px-2">
            <DevBlogProjectsThemeSection
              title="Resources & Acknowledgments"
              description={project.resources.description}
            />
            <ul
              className="list-disc pl-5"
              style={{ color: 'var(--text-on-secondary-color)' }}
            >
              {project.resources.map((resource) => (
                <li className="mb-2" key={resource}>
                  <Link
                    href={resource}
                    className="hover:underline"
                    style={{ color: 'var(--text-on-secondary-color)' }}
                  >
                    {resource}
                  </Link>
                </li>
              ))}
            </ul>
          </div>
        </Section>
      )} */}
    </DevBlogLayout>
  );
}

export default ProjectPage;

export async function getStaticPaths() {
  const paths = projectsData.map((project) => ({
    params: { slug: project.slug },
  }));

  return {
    paths,
    fallback: false,
  };
}

export async function getStaticProps({ params }) {
  const project = projectsData.find((p) => p.slug === params.slug);

  if (!project) {
    return { notFound: true };
  }

  return {
    props: { project },
  };
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/projects/creature-card.tsx
───────────────────────────────────────────────
import React from 'react';
import Image from 'next/image';
import DevBlogLayout from '../../components/DevBlogLayout';

type PageProps = {
  // Add any props specific to your page here
};

const GenericPage: React.FC<PageProps> = () => {
  // Add your page logic and JSX here

  return (
    <DevBlogLayout>
      <div className="relative mx-auto max-w-lg overflow-hidden rounded-lg bg-white shadow-lg ">
        <div className="fantasy-border relative z-10 flex flex-col items-center">
          <Image
            src="https://static.wikia.nocookie.net/forgottenrealms/images/0/00/Power_of_Persuasion_AFR.jpg/revision/latest/scale-to-width-down/1000?cb=20210710175238"
            alt="Ettin"
            className="rounded-lg shadow-lg"
            width={1024}
            height={1024}
          />
        </div>
        <div className="relative z-0 mt-[-50px] pt-10 text-center">
          <h2 className="py-1 text-3xl font-bold text-gray-700">Ettin</h2>
          <p className="mt-2 text-sm text-gray-600">
            Ettins are hulking, two-headed giants with a brutish and savage
            nature. They often dwell in remote, mountainous regions and are
            known for their violent temperament and territorial behavior.
          </p>
          <div className="mt-4 grid grid-cols-3 gap-2 text-gray-800">
            <div>
              <strong>Armor Class:</strong> 12 (Natural Armor)
            </div>
            <div>
              <strong>Hit Points:</strong> 85 (10d10 + 30)
            </div>
            <div>
              <strong>Speed:</strong> 40 feet
            </div>
            <div>
              <strong>STR:</strong> 21 (+5)
            </div>
            <div>
              <strong>DEX:</strong> 8 (-1)
            </div>
            <div>
              <strong>CON:</strong> 17 (+3)
            </div>
            <div>
              <strong>INT:</strong> 6 (-2)
            </div>
            <div>
              <strong>WIS:</strong> 10 (+0)
            </div>
            <div>
              <strong>CHA:</strong> 8 (-1)
            </div>
          </div>
          <div className="mt-4 text-gray-700">
            <strong className="block">Actions:</strong>
            <ul className="list-disc pl-5">
              <li className="mt-1">
                <strong>Multiattack</strong>: The ettin makes two attacks: one
                with its battleaxe and one with its morningstar.
              </li>
              <li className="mt-1">
                <strong>Battleaxe</strong>: Melee Weapon Attack: +7 to hit,
                reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.
              </li>
              <li className="mt-1">
                <strong>Morningstar</strong>: Melee Weapon Attack: +7 to hit,
                reach 5 ft., one target. Hit: 16 (2d10 + 5) piercing damage.
              </li>
            </ul>
          </div>
          <div className="mt-4 text-gray-700">
            <strong className="block">Special Abilities:</strong>
            <ul className="list-disc pl-5">
              <li className="mt-1">
                <strong>Wakeful</strong>: When one of the ettin’s heads is
                asleep, its other head is awake.
              </li>
              <li className="mt-1">
                <strong>Two Heads</strong>: The ettin has advantage on Wisdom
                (Perception) checks and on saving throws against being blinded,
                charmed, deafened, frightened, stunned, or knocked unconscious.
              </li>
            </ul>
          </div>
        </div>
      </div>
    </DevBlogLayout>
  );
};

export default GenericPage;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/projects/creature-generator.tsx
───────────────────────────────────────────────
import React, { useState } from 'react';
import { Button, Flex, IconButton } from '@with-nx/generic-ui';
import Image from 'next/image';
import { TbArrowBack } from 'react-icons/tb';
import { Grid } from '@with-nx/react-ui';

import { CreatureCard } from '../../components/projects/creature-generator/CreatureCard';
import DevblogLayout from '../../components/DevBlogLayout';
import { Section } from '../../components/atomic/organisms/Section';
import RandomLoadingMessage from '../../components/projects/creature-generator/CreatureGeneratorRandomLoadingMessage';
import {
  fetchCreatureData,
  loadImage,
} from '../../components/projects/creature-generator/creature-generator-utils';
import { fieldConfigs } from '../../components/projects/creature-generator/creature-generator-data';

export default function CreatureGenerator() {
  const [creature, setCreature] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [image, setImage] = useState('');

  const [imageLoading, setImageLoading] = useState(false);
  const [formValues, setFormValues] = useState(
    fieldConfigs.reduce((acc, field) => ({ ...acc, [field.name]: '' }), {})
  );
  const [errors, setErrors] = useState({});

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormValues((prev) => ({ ...prev, [name]: value }));
    setErrors((prev) => ({ ...prev, [name]: '' }));
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setIsLoading(true);
    console.log('Form values before submitting:', formValues);
    try {
      const creatureData = await fetchCreatureData(formValues);
      console.log(
        'Final JSON to send or process:',
        JSON.stringify(creatureData)
      );

      setCreature(creatureData.result);
    } catch (error) {
      console.error('Error fetching creature data:', error);
      alert('Failed to fetch creature data');
    } finally {
      setIsLoading(false);
    }
  };

  const handleBack = () => {
    console.log('Resetting state and clearing cache...');

    // Resetting all relevant states
    setCreature(null);
    setImage('');
    setFormValues(
      fieldConfigs.reduce((acc, field) => ({ ...acc, [field.name]: '' }), {})
    );
    setErrors({});

    // Clear browser or session storage if used (you'll need to adjust this part based on your implementation)
    if (typeof window !== 'undefined') {
      localStorage.removeItem('creatureForm'); // Example, replace 'creatureForm' with your actual storage key
      sessionStorage.removeItem('creatureForm');
    }
  };

  const handleLoadImage = async (imagePrompt) => {
    setImageLoading(true);
    try {
      const imageUrl = await loadImage(imagePrompt);
      setImage(imageUrl);
    } catch (error) {
      console.error('Error loading image:', error);
    } finally {
      setImageLoading(false);
    }
  };

  return (
    <DevblogLayout>
      <Section className="space-y-4">
        <h1>Create DND Monster</h1>
        {!creature && !isLoading && (
          <form
            className="grid grid-cols-1 gap-4 md:grid-cols-3"
            onSubmit={(event) => {
              event.preventDefault();
              handleSubmit(event);
            }}
          >
            {fieldConfigs.map(({ name, label, type, options }) => (
              <div key={name} className="flex flex-col">
                <label htmlFor={name}>{label}</label>
                {type === 'select' ? (
                  <select
                    name={name}
                    value={formValues[name]}
                    onChange={handleChange}
                    className="input-field"
                  >
                    <option value="">Select {label}</option>
                    {options.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                ) : (
                  <input
                    type="text"
                    name={name}
                    value={formValues[name]}
                    onChange={handleChange}
                    className="input-field"
                  />
                )}
                {errors[name] && (
                  <div className="error-message">{errors[name]}</div>
                )}
              </div>
            ))}
            <Button
              theme="primary"
              type="submit"
              className="col-span-3"
              text="Generate Creature"
            />
          </form>
        )}

        {isLoading && <RandomLoadingMessage />}
        {!isLoading && creature && (
          <>
            <IconButton
              theme="transparent"
              icon={<TbArrowBack />}
              label="Back"
              onClick={handleBack}
            />
            <Grid className="max-w-lg grid-cols-1 items-center justify-center gap-6 border bg-white p-1">
              <div>
                <Flex className="flex-col items-center justify-center">
                  {image ? (
                    <Image
                      src={image}
                      alt="Creature"
                      className="shadow-lg"
                      width={1024}
                      height={1024}
                    />
                  ) : (
                    <div className="flex h-64 w-full flex-col justify-center bg-gray-200 shadow-lg">
                      <Button
                        theme="primary"
                        text="Generate Image"
                        onClick={() => handleLoadImage(creature.imagePrompt)}
                        disabled={imageLoading}
                      />
                    </div>
                  )}
                </Flex>
                <CreatureCard creature={creature} />
              </div>
            </Grid>
          </>
        )}
      </Section>
    </DevblogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/projects/dnd-interactive-map.tsx
───────────────────────────────────────────────
import DevBlogLayout from '../../components/DevBlogLayout';
import dynamic from 'next/dynamic';

import { Heading, Text, Link } from '@with-nx/react-ui';

const DynamicMap = dynamic(
  () => import('../../components/projects/dnd-interactive-map/KonvaMap'),
  {
    ssr: false,
  }
);

function Map() {
  return (
    <DevBlogLayout>
      <div className="container mx-auto mb-6 max-w-7xl space-y-6">
        <Heading level={1}>Dnd Interactive Map (Work In Progress)</Heading>
        <Text className="sub-title">
          Click the icons to interact with the map
        </Text>
        <Link
          href="/blog/projects-dnd-interactive-map.mdx"
          className="underline"
        >
          Here is my blog for more technical details
        </Link>
      </div>

      <DynamicMap />
    </DevBlogLayout>
  );
}

export default Map;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/projects/freelance-find-sites.tsx
───────────────────────────────────────────────
import { Flex, Heading, Section, Tabs, Text } from '@with-nx/react-ui';

import DevBlogLayout from '../../components/DevBlogLayout';
import VersionOne from '../../components/projects/find-freelance-sites/version-one';
import PagespeedInsights from '../../components/projects/find-freelance-sites/pagespeed-insights';

export default function FreelanceFindSites() {
  const tabsData = [
    {
      label: 'Search - Free (10)',
      content: <VersionOne />,
    },
    {
      label: 'Pagespeed Insights',
      content: <PagespeedInsights />,
    },
  ];

  return (
    <DevBlogLayout>
      <Section>
        <Flex className="mb-8 flex-col space-y-4">
          <Heading level={1}>Find Freelance Sites</Heading>
          <Text>
            This tool is to find older websites that need an a refresh. The
            search utilizes Googles Custom Search API with the parameters that
            can help find older websites: age of website, file type of site, and
            exclude terms that show up on the site.
          </Text>
        </Flex>
        <Tabs data={tabsData} />
      </Section>
    </DevBlogLayout>
  );
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/projects/index.tsx
───────────────────────────────────────────────
import Image from 'next/image';
import { Grid, Heading } from '@with-nx/react-ui';
import { Text } from '@with-nx/generic-ui';
import Link from 'next/link';

import { projectsData } from '../../data/projects';
import DevBlogLayout from '../../components/DevBlogLayout';
import { Section } from '../../components/atomic/organisms/Section';

const ProjectPage = ({ projects }) => {
  return (
    <DevBlogLayout
      title="Robert Hogan's Projects - Digital Creations & Front-End Craftsmanship"
      description="Dive into Robert Hogan's curated showcase of digital projects, from cutting-edge tools and apps to libraries and immersive interfaces. Each piece demonstrates mastery in front-end development and user experience design."
    >
      <Section className="space-y-6">
        <Heading level={1}>Projects</Heading>
        <Text
          className="mx-auto max-w-3xl pb-6"
          text="Discover a diverse array of my digital creations, ranging from tools
          to apps, and from libraries to immersive interfaces. Each piece
          showcases the pinnacle of front-end craftsmanship and my dedication to
          creating seamless user experiences. Explore and connect!"
        />
        <Grid className="md:12 grid-cols-1 gap-6 space-y-4 lg:grid-cols-2 xl:grid-cols-3">
          {projects.map((project) => (
            <Link key={project.slug} href={`/projects/${project.slug}`}>
              <div className="relative h-[400px] w-full overflow-hidden rounded md:h-[400px]">
                <Image
                  src={project.image}
                  alt={project.title}
                  height={400}
                  width={400}
                  className="h-[400px] w-full rounded object-cover md:h-[400px]"
                />

                <div className="bg-image-overlay image-overlay absolute inset-0 lg:hover:opacity-100"></div>
              </div>

              <Heading level={3} className="py-6">
                <span className="hidden md:inline-block">{project.title}</span>
                <span className="md:hidden">{project.mobileTitle}</span>
              </Heading>
              <Text className="h-auto md:h-36" text={project.description} />
            </Link>
          ))}
        </Grid>
      </Section>
    </DevBlogLayout>
  );
};

export default ProjectPage;

export const getStaticProps = async () => {
  return {
    props: {
      projects: projectsData,
    },
  };
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/pages/projects/konva-map-generic.tsx
───────────────────────────────────────────────
import dynamic from 'next/dynamic';

import DevBlogLayout from '../../components/DevBlogLayout';
import DevBlogSection from '../../components/DevBlogSection';

const DNDMap = dynamic(
  () => import('../../components/projects/konva-map-generic/DNDMap'),
  {
    ssr: false,
  }
);

const KonvaMapGeneric: React.FC = () => {
  return (
    <DevBlogLayout title="Konva Map Generic">
      <h1>Konva Map Generic</h1>
      <DevBlogSection style={{ overflow: 'hidden' }}>
        <DNDMap />
      </DevBlogSection>
    </DevBlogLayout>
  );
};

export default KonvaMapGeneric;


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/styles/styles.css
───────────────────────────────────────────────
@import url('https://fonts.googleapis.com/css2?family=Golos+Text:wght@400;600;700;900&family=Silkscreen&display=swap');

@tailwind components;
@tailwind base;
@tailwind utilities;

/* theme colors can be found in /styles/themes.ts */

/* :root variables that do not change with theme */
:root {
  /* Animation Timings */
  --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
  --ease-in: cubic-bezier(0.4, 0, 1, 1);
  --ease-out: cubic-bezier(0, 0, 0.2, 1);

  /* Aspect Ratios */
  --aspect-ratio-wide: 16 / 9;
  --aspect-ratio-square: 1;

  /* Box Shadow */
  --box-shadow: 0 0 0 0.188rem rgba(66, 153, 225, 0.5);

  /* Button */
  --button-padding-y: 0.5rem;
  --button-padding-x: 0.75rem;
  --transition-all: all;
  --duration-300: 0.3s;

  /* Font Settings */
  --font-family: 'Inter', sans-serif;

  /* Form Element */
  --form-element-padding-y: 0.5rem;
  --form-element-padding-x: 0.75rem;
  --form-element-border-width: 0.063rem;
  /* --form-element-border-color: #e2e8f0; */
  --form-element-border-radius: 0.25rem;
  --form-element-font-size: 1rem;
  --form-element-height: 2.5rem;

  /* Input */
  --input-focus-outline-color: #4299e1;
  --input-focus-outline-width: 0.125rem;
  --input-focus-outline-offset: 0.125rem;

  /* Hover */
  --hover-scale: 1.05;
  --text-underline-offset: 0.25rem;

  /* Loader */
  --loader-size: 1rem;
  --loader-border: 0.125rem;
  --transition-speed: 0.3s;
  --animation-speed: 1s;

  /* Maximum Container Width */
  --max-width-container: 1200px;

  /* Opacity Levels */
  --opacity-disabled: 0.5;
  --opacity-hover: 0.8;
  --opacity-active: 1;

  /* Radius Sizes */
  --radius-sm: 4px;
  --radius-md: 8px;
  --radius-lg: 16px;

  /* Select */
  --select-appearance: none;
  --select-width: 100%;
  --select-padding-y: 0.5rem;
  --select-padding-x: 0.75rem;
  --border-radius: 0.25rem;
  --select-font-size: 1rem;
  --select-height: 2.5rem;
  --select-border-color: #e2e8f0;

  /* Shadow Depths */
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 20px rgba(0, 0, 0, 0.2);

  /* Spacing Scale */
  --space-xs: 4px;
  --space-sm: 8px;
  --space-md: 16px;
  --space-lg: 32px;
  --space-xl: 64px;

  /* Typography */
  --heading-font-size: 24px;
  --text-font-size: 16px;
  --small-font-size: 12px;
  --line-height: 1.5;

  /* Z-Index Levels */
  --z-index-dropdown: 1000;
  --z-index-modal: 1050;
  --z-index-overlay: 1100;
}

@layer base {
  html,
  .text-golos {
    font-family: 'Golos Text', sans-serif;
    font-size: 1.25rem;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  label,
  .text-silkscreen {
    font-family: 'Silkscreen', cursive;
    color: var(--text-color);
  }
  h1 {
    @apply text-5xl md:text-8xl text-center pb-10;
  }
  h2 {
    @apply text-3xl md:text-5xl pb-8;
  }
  h3 {
    @apply text-2xl;
  }
  h4 {
    @apply text-xl;
  }
  h5,
  span {
    @apply text-lg;
  }
  h6 {
    @apply text-base;
  }
}

html,
body {
  background: var(--bg-color);
}

body {
  color: var(--text-color);
  transition: background-color 0.5s, color 0.5s;
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
  padding-left: env(safe-area-inset-left);
  padding-right: env(safe-area-inset-right);
}

/* ANIMATIONS */
.transition-fast {
  transition: all var(--fast-transition-speed) ease;
}

/* BACKGROUND CLASSES */
.bg-image-overlay {
  background-color: var(--bg-opacity-color);
  transition: background-color 0.3s;
}
@media (min-width: 1024px) {
  .image-overlay:hover {
    background-color: transparent;
  }
}
.bg-opposite-theming {
  background-color: var(--text-color);
}
.bg-image-overlay {
  background-color: var(--bg-opacity-color);
  transition: background-color 0.3s;
}
@media (min-width: 1024px) {
  .image-overlay:hover {
    background-color: transparent;
  }
}
.bg-opposite-theming {
  background-color: var(--text-color);
}

/* BUTTON CLASSES */
a button {
  text-decoration: none;
}
.button-link:hover:before {
  right: 100%;
}
button {
  padding: var(--button-padding-y) var(--button-padding-x);

  /* border-width: var(--form-element-border-width); */
  border-radius: var(--form-element-border-radius);
  transition: all 200ms;
  transform: translateY(0);
}
.btn-primary:hover {
  transform: translateY(-0.25rem);
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.btn-primary {
  background-color: var(--primary-color);
  color: var(--text-on-primary-color);
}

.disabled,
.btn-primary:disabled {
  background-color: var(--disabled-color);
  cursor: not-allowed;
}
.btn-secondary {
  background-color: var(--secondary-color);
  color: var(--text-on-primary-color);
}

.btn-secondary:disabled {
  background-color: var(--disabled-secondary-color);
  cursor: not-allowed;
}
.btn-danger {
  background-color: var(--error-color);
  color: var(--text-on-primary-color);
}
.icon-button {
  display: flex;
  align-items: center;
  justify-content: center;
}
.icon-button span {
  margin-left: 8px;
}

/* DARK LIGHT STYLES */
.moon,
.sun {
  transition: opacity 0.3s, transform 0.3s;
}
.sun {
  stroke: var(--sun-icon-color);
}
.moon {
  stroke: var(--moon-icon-color);
}
.moon.fade-out,
.sun.fade-out {
  opacity: 0;
  transform: scale(0.9); /* Slight shrink */
}
.nav-logo {
  transition: opacity 0.3s;
}

/* DEBUG STYLING */
pre {
  background-color: var(--surface-color);
  border-radius: 1rem;
  padding: 1rem;
  overflow-x: auto;
}
code {
  color: var(--text-secondary);
  font-family: monospace;
}

/* FORM ELEMENTS */
input,
textarea,
select {
  border-color: var(--border-color);
  border-width: var(--border-width);
  background-color: var(--surface-color);
  color: var(--text-color);
  padding: 0.5rem;
  font-family: inherit;
}
input:focus,
textarea:focus,
select:focus {
  outline: none;
  border-color: var(--input-focus-outline-color);
  border-width: var(--input-focus-outline-width);
}

/* ICONS */
svg {
  stroke: var(--primary-fill);
}
.moon,
.sun {
  transition: opacity 0.3s, transform 0.3s;
}
.sun {
  color: var(--sun-icon-color);
}
.moon {
  color: var(--moon-icon-color);
}
.moon.fade-out,
.sun.fade-out {
  opacity: 0;
  transform: scale(0.9);
}

/* INPUT CLASSES */
input[type='number'],
input[type='text'],
input[type='string'] {
  width: var(--select-width);
  padding: var(--select-padding-y) var(--select-padding-x);
  border-width: var(--form-element-border-width);
  border-color: var(--select-border-color);
  border-radius: var(--border-radius);
  font-size: var(--select-font-size);
  height: var(--select-height);
  width: 100%;
  color: black;
}
input[type='number']:focus,
input[type='text']:focus,
input[type='string']:focus {
  outline: none;
  border-color: var(--input-focus-outline-color);
  border-width: var(--input-focus-outline-width);
}
input[type='checkbox'] {
  display: block;
  margin: auto;
}
input[type='checkbox']:focus {
  outline: none;
}
textarea {
  padding: var(--form-element-padding-y) var(--form-element-padding-x);
  border-width: var(--form-element-border-width);
  border-color: var(--form-element-border-color);
  border-radius: var(--form-element-border-radius);
  font-size: var(--form-element-font-size);
  height: 6rem;
  width: 100%;
}
textarea:focus {
  outline: none;
  border-color: var(--input-focus-outline-color);
  border-width: var(--input-focus-outline-width);
}

/* LINKS */
a {
  position: relative;
  text-decoration: none;
  color: var(--accent-color);
}
a:before {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 100%;
  border-bottom: 1px solid var(--primary-color);
  transition: right var(--transition-speed) ease;
  text-underline-offset: var(--text-underline-offset);
}
a:hover:before {
  right: 0;
}
a:hover {
  opacity: 0.9;
}
.no-underline-on-hover:hover:before {
  display: none;
}

/* SELECT CLASSES */
select {
  appearance: none; /* Hides default system UI */
}

/* SHADOW CLASSES */
.shadow-sm {
  box-shadow: var(--shadow-sm);
}
.shadow-md {
  box-shadow: var(--shadow-md);
}
.shadow-lg {
  box-shadow: var(--shadow-lg);
}

/* TYPOGRAPHY CLASSES */
a p,
.link {
  color: var(--text-color);
}
.text-on-primary {
  color: var(--text-on-primary-color);
}
.text-on-secondary {
  color: var(--text-on-secondary-color);
}
.text-github {
  color: var(--github-icon-color);
}
.bg-secondary-color h2,
.bg-secondary-color h3,
.bg-secondary-color p,
.bg-accent-color label {
  color: var(--text-on-secondary-color);
}
.bg-accent-color h2,
.bg-accent-color h3,
.bg-accent-color p,
.bg-accent-color {
  color: var(--text-on-accent-color);
}

.bg-surface-color h2,
.bg-surface-color h3,
.bg-surface-color p {
  color: var(--text-on-surface-color);
}

.bg-bg-color {
  color: var(--text-on-bg-color);
}

/* Z-INDEX CLASSES */
.z-dropdown {
  z-index: var(--z-index-dropdown);
}
.z-modal {
  z-index: var(--z-index-modal);
}

/* FORMIK VALIDATION CLASSES */
.valid-field {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><path fill="%2300ff00" d="M16.667 4.5l-9.167 9.167-4.5-4.5 1.75-1.75 2.75 2.75 7.417-7.417z"/></svg>');
  background-repeat: no-repeat;
  background-position: right 10px center;
  background-size: 20px;
}

.valid-field::after {
  font-family: 'Font Awesome 5 Free'; /* FontAwesome configuration */
  content: '\f00c'; /* FontAwesome check mark */
  color: green;
  margin-right: 10px;
  float: right;
}

/* DND CREATURE CARD */
.fantasy-border {
  position: relative;
  padding: 20px;
  background: #fff;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.fantasy-border::before,
.fantasy-border::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  border-radius: 10px;
}
.fantasy-border::before {
  border: 5px solid rgba(255, 255, 255, 0.5);
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
}
.fantasy-border::after {
  border: 2px solid #ffc107;
  box-shadow: 0 0 10px #ffc107;
  mix-blend-mode: multiply;
  bottom: 0;
  background: linear-gradient(to bottom, transparent, #ffc107);
}

.nav-link {
  position: relative;
  padding-bottom: 4px;
  transition: color 0.3s ease;
}

.nav-link.active {
  color: var(--primary-color);
}

.nav-link.active::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 2px;
  background-color: var(--primary-color);
  border-radius: 4px;
}

/* TABS */
.no-visible-scrollbar {
  scrollbar-width: none;
  -ms-overflow-style: none;
  -webkit-overflow-scrolling: touch;
}

.no-visible-scrollbar::-webkit-scrollbar {
  display: none;
}

.loader {
  border: 4px solid rgba(0, 0, 0, 0.1);
  border-left-color: #000;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  animation: spin 1s linear infinite;
  display: block;
  margin: 0 auto;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/styles/themes.ts
───────────────────────────────────────────────
export const themes = {
  light: {
    name: 'light',
    'primary-color': '#f25626', // Giants orange
    'text-on-primary-color': '#FFFFFF', // Text on primary color

    'secondary-color': '#6C91BF', // Silver Lake Blue (new secondary color for light theme)
    'text-on-secondary-color': '#FFFFFF', // Text on secondary color

    'accent-color': '#798478', // Battleship gray
    'text-on-accent-color': '#FFFFFF', // Text on accent color

    'bg-color': '#FFFFFF', // Light background
    'text-on-bg-color': '#333333', // Text on background color

    'surface-color': '#F5F5F5', // Surface color
    'text-on-surface-color': '#333333', // Text on surface color

    'form-element-color': '#2d3748',

    'text-color': '#333333', // Text color
    'primary-fill': '#333333', // Primary fill
    'primary-stroke': '#333333', // Primary stroke
    'secondary-fill': '#666666', // Secondary fill
    'secondary-stroke': '#666666', // Secondary stroke
    'success-color': '#55D68B', // Success color
    'error-color': '#F56565', // Error color
    'warning-color': '#FFD600', // Warning color
    'info-color': '#3DB8E9', // Info color
    'border-color': '#DDDDDD', // Border color
    'hover-color': '#EEEEEE', // Hover color
    'active-color': '#DDDDDD', // Active color
    'hover-secondary-color': '#B3B3B3', // Hover secondary color
    'active-secondary-color': '#999999', // Active secondary color
    'disabled-color': '#CCCCCC', // Disabled color
    'sun-icon-color': '#FFA700', // Sun icon color
    'moon-icon-color': '#D3D3D3', // Moon icon color
    'bg-opacity-color': 'rgba(255, 255, 255, 0.6)', // Background opacity color
    sound: 'https://app-assets.vercel.app/sounds/air-swoosh.wav', // Sound URL
  },
  dark: {
    name: 'dark',
    'primary-color': '#f25626', // Giants orange
    'text-on-primary-color': '#000000', // Text on primary color

    'secondary-color': '#2B3A67', // Delft Blue
    'text-on-secondary-color': '#ffffff', // Text on secondary color

    'accent-color': '#FFFFFF', // Baby powder
    'text-on-accent-color': '#000000', // Text on accent color

    'bg-color': '#1a202c', // Dark background
    'text-on-bg-color': '#e2e8f0', // Text on background color

    'surface-color': '#3D3D3D', // Surface color
    'text-on-surface-color': '#FFFFFF', // Text on surface color

    'text-color': '#e2e8f0', // Text color
    'primary-fill': '#e2e8f0', // Primary fill
    'primary-stroke': '#e2e8f0', // Primary stroke
    'secondary-fill': '#5a6678', // Secondary fill
    'secondary-stroke': '#5a6678', // Secondary stroke
    'success-color': '#55D68B', // Success color
    'error-color': '#F56565', // Error color
    'warning-color': '#FFD600', // Warning color
    'info-color': '#3DB8E9', // Info color
    'border-color': '#414141', // Border color
    'hover-color': '#1D1D1D', // Hover color
    'active-color': '#0E0E0E', // Active color
    'hover-secondary-color': '#8B9297', // Hover secondary color
    'active-secondary-color': '#72787D', // Active secondary color
    'disabled-color': '#5B5B5B', // Disabled color
    'sun-icon-color': '#FFA700', // Sun icon color
    'moon-icon-color': '#D3D3D3', // Moon icon color
    'bg-opacity-color': 'rgba(26, 32, 44, 0.6)', // Background opacity color
    sound: 'https://app-assets.vercel.app/sounds/air-swoosh.wav', // Sound URL
  },
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/utils/calculate.js
───────────────────────────────────────────────
export function calculateHitPoints(challengeRating) {
  return Math.round((challengeRating / 30) * 290 + 10);
}

export function calculateStat(challengeRating) {
  return Math.round((challengeRating / 30) * 19 + 1);
}

export function calculateActions(challengeRating) {
  return Math.round((challengeRating / 30) * 9 + 1);
}

export function calculateSpecialAbilities(challengeRating) {
  return Math.round((challengeRating / 30) * 9 + 1);
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/utils/getIconForCategory.tsx
───────────────────────────────────────────────
import { FcGoogle } from 'react-icons/fc';
import {
  SiCss3,
  SiGithubpages,
  SiJavascript,
  SiJest,
  SiNextdotjs,
  SiNx,
  SiReact,
  SiReactquery,
  SiStorybook,
  SiTailwindcss,
  SiTypescript,
} from 'react-icons/si';
import { AiOutlineApi } from 'react-icons/ai';

export function getIconForCategory(category: string): JSX.Element | null {
  switch (category) {
    case 'React':
      return <SiReact className="text-react-js" />;
    case 'Next':
      return <SiNextdotjs className="stroke-next-js" />;
    case 'API':
      return <AiOutlineApi className="text-api" />;
    case 'JavaScript':
      return <SiJavascript className="text-javascript " />;
    case 'CSS':
      return <SiCss3 className="text-css" />;
    case 'NX':
      return <SiNx className="stroke-nx" />;
    case 'Typescript':
      return <SiTypescript className="text-typescript" />;
    case 'Storybook':
      return <SiStorybook className="text-storybook" />;
    case 'ReactQuery':
      return <SiReactquery className="text-react-query" />;
    case 'TailwindCSS':
      return <SiTailwindcss className="text-tailwindcss" />;
    case 'Jest':
      return <SiJest className="text-jest" />;
    case 'Google':
      return <FcGoogle className="text-google" />;
    case 'GithubPages':
      return (
        <SiGithubpages
          className="text-github"
          style={{ width: '3.75em', height: '3.75em' }}
        />
      );
    default:
      return null;
  }
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/utils/helper.ts
───────────────────────────────────────────────
export const scrollToProjects = (id: string) => {
  const element = document.getElementById(id);
  if (element) {
    element.scrollIntoView({ behavior: 'smooth' });
  }
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/tailwind.config.js
───────────────────────────────────────────────
const { createGlobPatternsForDependencies } = require('@nrwl/react/tailwind');
const { join } = require('path');
const {
  default: flattenColorPalette,
} = require('tailwindcss/lib/util/flattenColorPalette');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    join(
      __dirname,
      '{src,pages,components}/**/*!(*.stories|*.spec).{js,jsx,ts,tsx,html}'
    ),
    ...createGlobPatternsForDependencies(__dirname),
  ],
  safelist: [
    'text-nx',
    'text-storybook',
    'text-jest',
    'text-next-js',
    'text-api',
    'text-github',
    'absolute',
  ],
  theme: {
    extend: {
      animation: {
        input: 'var(--animation-speed)',
        'meteor-effect': 'meteor 5s linear infinite',
        wiggle: 'wiggle 1s ease-in-out infinite',
      },
      aspectRatio: {
        wide: 'var(--aspect-ratio-wide)',
        square: 'var(--aspect-ratio-square)',
      },
      backgroundColor: {
        'secondary-color': 'var(--secondary-color)',
      },
      backgroundImage: {
        'p2w-hero':
          "url('https://app-assets.vercel.app/apps/play2winff/p2w_hero.jpg')",
        'react-ui-library':
          "url('https://app-assets.vercel.app/apps/devblog/dev_blog_react-ui-library.jpg')",
        concentration:
          "url('https://app-assets.vercel.app/apps/devblog/dev_blog-concentration.jpg')",
        'dnd-interactive-map':
          "url('https://app-assets.vercel.app/apps/devblog/dev_blog-map.jpg')",
        'custom-google-search':
          "url('https://app-assets.vercel.app/apps/devblog/devblog_custom_search_new.jpg')",
        'swapi-plus':
          "url('https://app-assets.vercel.app/apps/swapi-cards/devblog_swapi-plus.jpg')",
      },
      borderWidth: {
        DEFAULT: 'var(--button-border-width)',
      },
      borderRadius: {
        100: '100%',
      },
      boxShadow: {
        sm: 'var(--shadow-sm)',
        md: 'var(--shadow-md)',
        lg: 'var(--shadow-lg)',
        input: `0px 2px 3px -1px rgba(0,0,0,0.1), 0px 1px 0px 0px rgba(25,28,33,0.02), 0px 0px 0px 1px rgba(25,28,33,0.08)`,
      },
      colors: {
        primary: 'var(--primary-color)',
        secondary: 'var(--secondary-color)',
        'accent-color': 'var(--accent-color)',
        'bg-color': 'var(--bg-color)',
        'surface-color': 'var(--surface-color)',
        'text-color': 'var(--text-color)',
        'text-color-secondary': 'var(--text-color-secondary)',
        'primary-fill': 'var(--primary-fill)',
        'secondary-icon-color': 'var(--secondary-icon-color)',
        'success-color': 'var(--success-color)',
        'error-color': 'var(--error-color)',
        'warning-color': 'var(--warning-color)',
        'info-color': 'var(--info-color)',
        'border-color': 'var(--border-color)',
        'hover-color': 'var(--hover-color)',
        'active-color': 'var(--active-color)',
        'hover-secondary-color': 'var(--hover-secondary-color)',
        'active-secondary-color': 'var(--active-secondary-color)',
        'disabled-color': 'var(--disabled-color)',
        'sun-color-color': 'var(--sun-color-color)',
        'moon-color-color': 'var(--moon-color-color)',
        'bg-opacity-color': 'var(--bg-opacity-color)',
      },
      fontFamily: {
        sans: 'var(--font-family)',
      },
      keyframes: {
        meteor: {
          '0%': { transform: 'rotate(215deg) translateX(0)', opacity: '1' },
          '70%': { opacity: '1' },
          '100%': {
            transform: 'rotate(215deg) translateX(-500px)',
            opacity: '0',
          },
        },
        wiggle: {
          '0%, 100%': { transform: 'rotate(-3deg)' },
          '50%': { transform: 'rotate(3deg)' },
        },
      },
      opacity: {
        disabled: 'var(--opacity-disabled)',
        hover: 'var(--opacity-hover)',
        active: 'var(--opacity-active)',
      },
      spacing: {
        215: '215px',
        '-169': '-169px',
        '-96': '-96px',
        317: '317px',
        155: '155px',
        '-105': '-105px',
        '-212': '-212px',
        295: '295px',
      },
      transitionDuration: {
        DEFAULT: 'var(--transition-speed)',
        fast: 'var(--fast-transition-speed)',
        slow: 'var(--slow-transition-speed)',
      },
      transform: {
        'rotate-62': 'rotate(62deg)',
        'rotate--3': 'rotate(-3deg)',
        'rotate-144': 'rotate(144deg)',
      },
      zIndex: {
        dropdown: 'var(--z-index-dropdown)',
        modal: 'var(--z-index-modal)',
        overlay: 'var(--z-index-overlay)',
      },
    },
  },
  plugins: [addVariablesForColors],
  presets: [require('../../tailwind-workspace-preset.js')],
};

function addVariablesForColors({ addBase, theme }) {
  let allColors = flattenColorPalette(theme('colors'));
  let newVars = Object.fromEntries(
    Object.entries(allColors).map(([key, val]) => [`--${key}`, val])
  );

  addBase({
    ':root': newVars,
  });
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/project.json
───────────────────────────────────────────────
{
  "name": "devblog",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/devblog",
  "projectType": "application",
  "targets": {
    "build": {
      "executor": "@nrwl/next:build",
      "outputs": ["{options.outputPath}"],
      "defaultConfiguration": "production",
      "options": {
        "root": "apps/devblog",
        "outputPath": "dist/apps/devblog"
      },
      "configurations": {
        "development": {
          "outputPath": "apps/devblog"
        },
        "production": {}
      }
    },
    "serve": {
      "executor": "@nrwl/next:server",
      "defaultConfiguration": "development",
      "options": {
        "buildTarget": "devblog:build",
        "dev": true
      },
      "configurations": {
        "development": {
          "buildTarget": "devblog:build:development",
          "dev": true
        },
        "production": {
          "buildTarget": "devblog:build:production",
          "dev": false
        }
      }
    },
    "export": {
      "executor": "@nrwl/next:export",
      "options": {
        "buildTarget": "devblog:build:production"
      }
    },
    "test": {
      "executor": "@nrwl/jest:jest",
      "outputs": ["{workspaceRoot}/coverage/apps/devblog"],
      "options": {
        "jestConfig": "apps/devblog/jest.config.ts",
        "passWithNoTests": true
      }
    },
    "lint": {
      "executor": "@nrwl/linter:eslint",
      "outputs": ["{options.outputFile}"],
      "options": {
        "lintFilePatterns": ["apps/devblog/**/*.{ts,tsx,js,jsx}"]
      }
    }
  },
  "tags": []
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/next.config.js
───────────────────────────────────────────────
// @ts-check

// eslint-disable-next-line @typescript-eslint/no-var-requires
const { withNx } = require('@nrwl/next/plugins/with-nx');
const path = require('path');

const withMDX = require('@next/mdx')({
  extension: /\.mdx?$/,
  options: {
    remarkPlugins: [],
    rehypePlugins: [],
  },
});

/**
 * @type {import('@nrwl/next/plugins/with-nx').WithNxOptions}
 **/
const nextConfig = {
  nx: {
    svgr: false,
  },
  images: {
    domains: [
      'www.dndbeyond.com',
      'rhogandev.wordpress.com',
      'dazzling-rshgymtemplate.wordpress.com',
      'static.wikia.nocookie.net',
      'raw.githubusercontent.com',
      'localhost',
      'app-assets.vercel.app',
      'github.com',
      'images.pexels.com',
      'images.unsplash.com',
      'img.icons8.com',
      'oaidalleapiprodscus.blob.core.windows.net',
      'framerusercontent.com',
    ],
  },
  webpack: (config) => {
    config.resolve.alias = {
      ...(config.resolve.alias || {}),
      '@devblog/components': path.resolve(__dirname, 'components'),
    };
    return config;
  },
};

// Combine MDX and Nx with final config
module.exports = withNx(withMDX(nextConfig));


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/tsconfig.json
───────────────────────────────────────────────
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "jsx": "preserve",
    "allowJs": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "incremental": true,
    "types": ["jest", "node"]
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    "**/*.js",
    "**/*.jsx",
    "next-env.d.ts",
    "../../libs/openai-integration/src/lib/openai.service.ts"
  ],
  "exclude": ["node_modules", "jest.config.ts"]
}


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/postcss.config.js
───────────────────────────────────────────────
const { join } = require('path');

// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the `postcssConfig` build
// option from your application's configuration (i.e. project.json).
//
// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries

module.exports = {
  plugins: {
    tailwindcss: {
      config: join(__dirname, 'tailwind.config.js'),
    },
    autoprefixer: {},
  },
};


═══════════════════════════════════════════════
📄 FILE: ./apps/devblog/.eslintrc.json
───────────────────────────────────────────────
{
  "extends": [
    "plugin:@nrwl/nx/react-typescript",
    "next",
    "next/core-web-vitals",
    "../../.eslintrc.json"
  ],
  "ignorePatterns": ["!**/*", ".next/**/*"],
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js", "*.jsx"],
      "rules": {
        "@next/next/no-html-link-for-pages": ["error", "apps/devblog/pages"]
      }
    },
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {}
    },
    {
      "files": ["*.js", "*.jsx"],
      "rules": {}
    }
  ],
  "rules": {
    "@next/next/no-html-link-for-pages": "off"
  },
  "env": {
    "jest": true
  }
}


